2025-06-08 16:57:32.534 | INFO     | main:websocket_endpoint:30 - WebSocket connection accepted from 127.0.0.1:52273
2025-06-08 16:57:32.534 | INFO     | tools.swe_tools.file_operator:__init__:80 - FileOperatorTool initialized with workspace_root: D:\deep_learning\codes\umlagent\app\workspace\tmp_codes
2025-06-08 16:57:42.912 | INFO     | main:websocket_endpoint:61 - Received message from 127.0.0.1:52273: 我想学习llava，帮我找一个并且分析UML
2025-06-08 16:57:42.913 | INFO     | agents.umlagent:create_initial_plan:208 - Creating initial plan with ID: plan_1749373062
2025-06-08 16:57:49.492 | INFO     | agents.umlagent:create_initial_plan:237 -  结果为:  `工具:planning`的观测结果输出为 :
Plan created successfully with ID: plan_1749373062

Plan: 学习并分析LLava项目 (ID: plan_1749373062)
=========================================

Progress: 0/5 steps completed (0.0%)
Status: 0 completed, 0 in progress, 0 blocked, 5 not started

Steps:
0. [ ] 查找一个LLava相关的GitHub仓库
1. [ ] 克隆找到的GitHub仓库到本地
2. [ ] 确保Python包结构正确，添加__init__.py文件（如果需要）
3. [ ] 生成代码库的UML类图
4. [ ] 分析UML图并提供总结

2025-06-08 16:57:49.494 | INFO     | agents.base:run:123 - websocket initialized finish, state:<starlette.datastructures.State object at 0x00000223D0C41A90>
2025-06-08 16:57:49.494 | INFO     | agents.base:run:133 - Executing step 1/20
2025-06-08 16:57:53.458 | INFO     | agents.tool_call:think:64 - ✨ uml agnet 的想法为: 计划已创建，接下来需要执行第一个步骤：查找一个LLava相关的GitHub仓库。

我将使用baidu_search工具来搜索LLava相关的GitHub仓库。
2025-06-08 16:57:53.459 | INFO     | agents.tool_call:think:66 - 🛠️ uml agnet 选择了 1 个工具
2025-06-08 16:57:53.459 | INFO     | agents.tool_call:think:71 - 🧰 选择的工具信息: ['baidu_search']
2025-06-08 16:57:53.459 | INFO     | agents.tool_call:think:89 - 🧰 工具的参数是: ['{"query": "LLava GitHub 仓库"}']
2025-06-08 16:57:54.464 | INFO     | agents.tool_call:act:142 - 🎯 工具 'baidu_search' 完成了它的任务! 其执行结果为:  `工具:baidu_search`的观测结果输出为 :
[{'title': 'lava · GitHub Topics · GitHub', 'abstract': 'lava · GitHub Topics · GitHub\n\n\n查看此网页的中文翻译，请点击\n\n\n翻译此页\n\n\n\n2025年2月13日GitHub is where people build software. More than 150 million people use GitHub to discover, fork, and contribute to over 420 million projects.\n\n\nGitHub', 'url': 'http://www.baidu.com/link?url=F5JNTlMsC4shHTkQLwnLFs4qL23EBUru8Y2ZWn6QkR2Fy3cM0dHX2fAzOyc6_JmB', 'rank': 1}, {'title': 'GitHub - LLaVA-VL/LLaVA-NeXT', 'abstract': 'GitHub - LLaVA-VL/LLaVA-NeXT\n\n\n查看此网页的中文翻译，请点击\n\n\n翻译此页\n\n\n\ngit clone https://github.com/LLaVA-VL/LLaVA-NeXTcdLLaVA-NeXT 2.Install the inference package: conda create -n llava python=3.10 -y conda activate llava pip install --upgrade pip#Enable PEP 660 support.pip install -e".[train]" \n\n\nGitHub', 'url': 'http://www.baidu.com/link?url=WcZQNT-cO46kPPlKEAVXeSA37ncEqLmu1uxtJWk72ERj7Oi3nfKKcLaHwEerd42F', 'rank': 2}, {'title': '基于llava-v1.5-7b大模型的图片理解实战 - 知乎', 'abstract': '基于llava-v1.5-7b大模型的图片理解实战 - 知乎\n\n\n\n\n\n\n\n\n\n2024年3月25日1、查看服务器配置 nvidia-smi CUDA版本= 12.2,8张24gRTX 3090显卡。 2、环境配置 2.1、克隆此存储库并导航到 LLaVA 文件夹 git clone https://github.com/haotian-liu/LLaVA.git cd LLaVA 2.2、安装包 condacreate -n llava python=3.10 -y conda activate llava pip install --upgrade pip # enable ...\n\n\n知', 'url': 'http://www.baidu.com/link?url=WcZQNT-cO46kPPlKEAVXeVrOQRmbAxD6vsRg9OU1icTqkDKbWEPkGJs1rnLYfSUj', 'rank': 3}, {'title': 'Llava-1.5v模型部署指南 - 知乎', 'abstract': 'Llava-1.5v模型部署指南 - 知乎\n\n2023年11月30日Llava是开源的多模态大模型,由威斯康星麦迪逊大学的Haotian Liu等人研发并发布,论文已中2023NIPS。 Github仓库链接\u200bgithub.com/haotian-liu/LLaVA 1. 模型下载 模型有7B和13B的,本人用的是24GB显存的3090,只推理不微调是绰绰有余。如果7B模型取4bit的quatilization显存可以最低8GB。 以下是模型在hugging face上的...\n\n\n知乎', 'url': 'http://www.baidu.com/link?url=WcZQNT-cO46kPPlKEAVXeVrOQRmbAxD6vsRg9OU1icSEQHk6P_d4tLm7zThm7BuN', 'rank': 4}, {'title': '保姆级llava-v1.5-7b部署教程_llava部署-CSDN博客', 'abstract': '保姆级llava-v1.5-7b部署教程_llava部署-CSDN博客\n\n\n\n\n\n\n\n\n\n2024年1月27日1、克隆仓库 gitclone git@github.com:haotian-liu/LLaVA.gitcdLLaVA 1 2 2、安装package conda create -n llavapython=3.10-y conda activate llava pipinstall--upgrade pip# enable PEP 660 supportpipinstall-e. 1 2 3 4 3、安装训练所需的package(若无需进一步训练,只是部署,则可暂时跳过本步骤) ..', 'url': 'http://www.baidu.com/link?url=ZbYdKXJpGoPfXG_nqFEHjahLk_FJbFLUku999nuBzXe7ssssFljYUPC9D25qLvyhUk3hnyZCL1ekwP8It48ShBqzH6w3fkHyMrMhU38xzrG', 'rank': 5}, {'title': '教程类:在超算互联网(SCNet)平台轻松玩转多模态大模型LLaVA的推理...', 'abstract': '教程类:在超算互联网(SCNet)平台轻松玩转多模态大模型LLaVA的推理...\n\n\n\n\n\n\n\n\n\n2024年8月15日git clone https://github.com/haotian-liu/LLaVA.git cd LLaVA 安装 pip install --upgrade pip # enable PEP 660 support pip install -e . 安装训练需要的包 pip install -e ".[train]" pip install flash-attn --no-build-isolation # 注意DCU版flash-attn请从光合开发者平台下载移', 'url': 'http://www.baidu.com/link?url=RkXuuf4u2W_0DzQrKLduAZYcjNJMQkAKNErdO8wuEY69qZ3sOzN8aTJKhnlXxFYI_ADXdH6gK_krvLiyts_Lko0bDoUeouwfU2HX1hfmGwy', 'rank': 6}, {'title': '每周GitHub 探索|洞悉开源项目新动态,助你提升开发效能', 'abstract': '每周GitHub 探索|洞悉开源项目新动态,助你提升开发效能\n\n\n\n\n\n\n\n\n\n2024年7月7日本期精选近一周 9 款 GitHub 优质项目，涵盖 GPU 管理、Python 包管理、LLM 本地运行、开发者成长、代码编辑、代理构建、社交媒体管理、服务器管理和数据滚动等领域。1.NVIDIA GPU Operator ️仓库名称：NVIDIA/gpu-operator截止发稿星数: 1627 (近一周新增:395)仓库语言: Go仓库开源协议：Apache License 2.0 ...\n\n\n诚哥看开源\n\n\n\n\n\n\n\n\n\ue680\n播报\n\n\n\ue67d\n暂停', 'url': 'http://www.baidu.com/link?url=WcZQNT-cO46kPPlKEAVXeZOpmwSBYa97XmhysYm9EsvAvi4bV7_bO_81Vc4Mqy4ykuhwCZBxX_djIqpF6o2ncpkcJ1b6nRgkDuurv4bucmq', 'rank': 7}, {'title': '每月GitHub 探索|9 个极具潜力的开源项目,燃爆 2024 年!', 'abstract': '每月GitHub 探索|9 个极具潜力的开源项目,燃爆 2024 年!\n\n\n\n\n\n\n\n\n\n2024年6月16日本期精选了 9 个 GitHub 上近期火爆的开源项目，涵盖 AI、机器人、开发工具等领域，它们极具潜力，将燃爆 2024 年！1.LazyVim：一个可定制的 Neovim 设置 ️仓库名称：LazyVim/LazyVim截止发稿星数: 14851 (近一个月新增:1805)仓库语言: Lua仓库开源协议：Apache License 2.0 引言 LazyVim 是一种 Neovim ...\n\n\n诚哥看开源\n\n\n\n\n\n\n\n\n\ue680\n播报\n\n\n\ue67d\n暂停', 'url': 'http://www.baidu.com/link?url=WcZQNT-cO46kPPlKEAVXeZOpmwSBYa97XmhysYm9EsvfRCUZfj9HnEdHijCviZFzPhQdTvXNtDvMwhhtCJ74qrw6o21kxSKcyFLV1F4FFHa', 'rank': 8}, {'title': '图文大模型LLava本地部署记录 - 哔哩哔哩', 'abstract': '图文大模型LLava本地部署记录 - 哔哩哔哩\n\n\n\n\n\n\n\n\n\n2023年10月12日作为GPT-4的强势替代,记录LLava(仅用作inference)本地部署方法。 代码:https://github.com/haotian-liu/LLaVA.git 实验环境 os:ubuntu cpu:i9-10940X gpu:2*3090 python:3.10 torch:2.0.1 依赖&环境(和github上一致) git clone https://github.com/haotian-liu/LLaVA.git ...\n\n\n哔哩哔哩\n\n\n\n\n\n\n\n\n\ue680\n播报\n\n\n\ue67d\n暂停', 'url': 'http://www.baidu.com/link?url=ZbYdKXJpGoPfXG_nqFEHjiZEQWGkv3woSNgG9fsLQNZu0Y9IiI_solGQ70csz5yRpnNbf0xXwm4PWIYX_FS6T_', 'rank': 9}, {'title': 'lava / lava · GitLab', 'abstract': 'lava / lava · GitLab\n\nLAVA is a continuous integration system for deploying operating systems onto physical and virtual hardware for running tests. Tests can be simple boot testing, bootloader testing and system...\n\n\ngitlab.com/lava/la...', 'url': 'http://www.baidu.com/link?url=QpzYmKHgitzsnCVhAjncQmdirCjiDcPfjsZm1KEQq3EYBZDXsX9WZkotb9ingo2a', 'rank': 10}]
2025-06-08 16:57:54.466 | INFO     | agents.umlagent:update_plan_status:153 - Marked step 0 as completed in plan plan_1749373062
2025-06-08 16:57:54.466 | INFO     | agents.base:run:133 - Executing step 2/20
2025-06-08 16:58:01.044 | INFO     | agents.tool_call:think:64 - ✨ uml agnet 的想法为: Using tools response: 我已经找到了一个与LLava相关的GitHub仓库：`LLaVA-VL/LLaVA-NeXT`。现在，我将执行下一步骤：克隆找到的GitHub仓库到本地。

我将使用github_repo_cloner_ssh工具来克隆这个仓库。
2025-06-08 16:58:01.046 | INFO     | agents.tool_call:think:66 - 🛠️ uml agnet 选择了 1 个工具
2025-06-08 16:58:01.046 | INFO     | agents.tool_call:think:71 - 🧰 选择的工具信息: ['github_repo_cloner_ssh']
2025-06-08 16:58:01.046 | INFO     | agents.tool_call:think:89 - 🧰 工具的参数是: ['{"repo_name": "LLaVA-VL/LLaVA-NeXT"}']
2025-06-08 16:58:03.148 | INFO     | agents.tool_call:act:142 - 🎯 工具 'github_repo_cloner_ssh' 完成了它的任务! 其执行结果为:  `工具:github_repo_cloner_ssh`的观测结果输出为 :
D:\deep_learning\codes\umlagent\app\workspace\tmp_codes\LLaVA-NeXT
2025-06-08 16:58:03.148 | INFO     | agents.umlagent:update_plan_status:153 - Marked step 1 as completed in plan plan_1749373062
2025-06-08 16:58:03.148 | INFO     | agents.base:run:133 - Executing step 3/20
2025-06-08 16:58:11.002 | INFO     | agents.tool_call:think:64 - ✨ uml agnet 的想法为: Using tools response: 我已经成功克隆了LLava相关的GitHub仓库到本地。现在，我将执行下一步骤：确保Python包结构正确，添加__init__.py文件（如果需要）。

我将使用ensure_init_py工具来确保Python包结构正确并添加__init__.py文件。
2025-06-08 16:58:11.003 | INFO     | agents.tool_call:think:66 - 🛠️ uml agnet 选择了 1 个工具
2025-06-08 16:58:11.003 | INFO     | agents.tool_call:think:71 - 🧰 选择的工具信息: ['ensure_init_py']
2025-06-08 16:58:11.003 | INFO     | agents.tool_call:think:89 - 🧰 工具的参数是: ['{"root_dir_path": "D:/deep_learning/codes/umlagent/app/workspace/tmp_codes/LLaVA-NeXT"}']
2025-06-08 16:58:11.016 | INFO     | agents.tool_call:act:142 - 🎯 工具 'ensure_init_py' 完成了它的任务! 其执行结果为:  `工具:ensure_init_py`的观测结果输出为 :
成功在以下 14 个目录中创建了 __init__.py 文件:
- D:\deep_learning\codes\umlagent\app\workspace\tmp_codes\LLaVA-NeXT\__init__.py
- D:\deep_learning\codes\umlagent\app\workspace\tmp_codes\LLaVA-NeXT\llava\eval\__init__.py
- D:\deep_learning\codes\umlagent\app\workspace\tmp_codes\LLaVA-NeXT\llava\model\language_model\__init__.py
- D:\deep_learning\codes\umlagent\app\workspace\tmp_codes\LLaVA-NeXT\llava\model\multimodal_encoder\__init__.py
- D:\deep_learning\codes\umlagent\app\workspace\tmp_codes\LLaVA-NeXT\llava\model\multimodal_encoder\dev_eva_clip\__init__.py
- D:\deep_learning\codes\umlagent\app\workspace\tmp_codes\LLaVA-NeXT\llava\model\multimodal_encoder\eva_clip\__init__.py
- D:\deep_learning\codes\umlagent\app\workspace\tmp_codes\LLaVA-NeXT\llava\model\multimodal_encoder\mlcd\__init__.py
- D:\deep_learning\codes\umlagent\app\workspace\tmp_codes\LLaVA-NeXT\llava\model\multimodal_projector\__init__.py
- D:\deep_learning\codes\umlagent\app\workspace\tmp_codes\LLaVA-NeXT\llava\model\multimodal_resampler\__init__.py
- D:\deep_learning\codes\umlagent\app\workspace\tmp_codes\LLaVA-NeXT\llava\train\__init__.py
- D:\deep_learning\codes\umlagent\app\workspace\tmp_codes\LLaVA-NeXT\playground\__init__.py
- D:\deep_learning\codes\umlagent\app\workspace\tmp_codes\LLaVA-NeXT\playground\demo\__init__.py
- D:\deep_learning\codes\umlagent\app\workspace\tmp_codes\LLaVA-NeXT\scripts\__init__.py
- D:\deep_learning\codes\umlagent\app\workspace\tmp_codes\LLaVA-NeXT\scripts\archived\__init__.py
2025-06-08 16:58:11.016 | INFO     | agents.umlagent:update_plan_status:153 - Marked step 2 as completed in plan plan_1749373062
2025-06-08 16:58:11.016 | INFO     | agents.base:run:133 - Executing step 4/20
2025-06-08 16:58:25.173 | INFO     | agents.tool_call:think:64 - ✨ uml agnet 的想法为: Using tools response: Using tools response: 我已经成功确保了Python包结构正确并添加了__init__.py文件。现在，我将执行下一步骤：生成代码库的UML类图。

我将使用code_to_uml_generator_multilang工具来生成代码库的UML类图。
2025-06-08 16:58:25.175 | INFO     | agents.tool_call:think:66 - 🛠️ uml agnet 选择了 1 个工具
2025-06-08 16:58:25.175 | INFO     | agents.tool_call:think:71 - 🧰 选择的工具信息: ['code_to_uml_generator_multilang']
2025-06-08 16:58:25.175 | INFO     | agents.tool_call:think:89 - 🧰 工具的参数是: ['{"repo_path": "D:/deep_learning/codes/umlagent/app/workspace/tmp_codes/LLaVA-NeXT", "output_png_path": "D:/deep_learning/codes/umlagent/app/static/output_images/llava_uml.png", "exclude_folders": ["venv", ".git", "__pycache__", "docs", "tests", "test", "build", "target", "out"], "exclude_files": ["setup.py", "conftest.py"], "include_attributes": true, "include_methods": true, "max_depth": -1, "target_languages": ["python"]}']
2025-06-08 16:58:28.223 | INFO     | tools.uml:execute:696 - 准备通过 WebSocket 发送 UML 图片 'llava_uml.png'。
2025-06-08 16:58:28.240 | INFO     | tools.uml:execute:711 - UML 图片 'llava_uml.png' 已通过 WebSocket 发送 (615051 字节)。
2025-06-08 16:58:28.241 | INFO     | agents.tool_call:act:142 - 🎯 工具 'code_to_uml_generator_multilang' 完成了它的任务! 其执行结果为:  `工具:code_to_uml_generator_multilang`的观测结果输出为 :
UML 图表和文本描述已成功生成。
PNG 图像保存路径: 'D:\deep_learning\codes\umlagent\app\static\output_images\llava_uml.png'

---
UML 图表文本描述内容:
---
# UML 图表文本描述

## Class: `AdaptiveKLController`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `utils`

### 属性 (Attributes)
- `horizon`
- `target`
- `value`

### 方法 (Methods)
- `__init__(self, init_kl_coef, target, horizon)`
- `update(self, current, n_steps)`

---

## Class: `AllGather`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `utils`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `torch.autograd.Function`

### 方法 (Methods)
- `backward(ctx, grad_output)`
- `forward(ctx, tensor, rank, world_size)`

---

## Class: `Attention`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `eva_vit_model`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`, `nn.Module`, `nn.Module`

### 属性 (Attributes)
- `attn_drop`
- `head_dim`
- `in_proj_weight`
- `inner_attn_ln`
- `logit_scale_max`
- `num_heads`
- `out_drop`
- `out_proj`
- `proj`
- `proj_drop`
- `rope`
- `scale`
- `scale_heads`
- `scaled_cosine`
- `subln`
- `xattn`
- `xattn_drop`

### 方法 (Methods)
- `__init__(self, dim, num_heads, qkv_bias, qk_scale, attn_drop, proj_drop, window_size, attn_head_dim, xattn, rope, subln, norm_layer)`
- `__init__(self, dim, num_heads, qkv_bias, scaled_cosine, scale_heads, logit_scale_max, attn_drop, proj_drop, xattn, rope)`
- `forward(self, x, attn_mask: Optional[torch.Tensor])`
- `forward(self, x, rel_pos_bias, attn_mask)`

---

## Class: `AttentionPool2d`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modified_resnet`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `c_proj`
- `k_proj`
- `num_heads`
- `positional_embedding`
- `q_proj`
- `v_proj`

### 方法 (Methods)
- `__init__(self, spacial_dim: int, embed_dim: int, num_heads: int, output_dim: int)`
- `forward(self, x)`

---

## Class: `AutoModelForCausalLMWithValueHead`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_value_head`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `PreTrainedModelWrapper`

### 属性 (Attributes)
- `lm_head_namings`
- `supported_args`
- `transformers_parent_class`
- `v_head`

### 方法 (Methods)
- `__init__(self, pretrained_model, **kwargs)`
- `_init_weights(self, **kwargs)`
- `forward(self, input_ids, past_key_values, attention_mask, **kwargs)`
- `generate(self, *args, **kwargs)`
- `post_init(self, state_dict)`
- `push_to_hub(self, *args, **kwargs)`
- `state_dict(self, *args, **kwargs)`

---

## Class: `AutoModelForSeq2SeqLMWithValueHead`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_value_head`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `PreTrainedModelWrapper`

### 属性 (Attributes)
- `is_encoder_decoder`
- `lm_head_namings`
- `supported_args`
- `transformers_parent_class`
- `v_head`

### 方法 (Methods)
- `__init__(self, pretrained_model, **kwargs)`
- `_has_lm_head(self)`
- `_init_weights(self, **kwargs)`
- `forward(self, input_ids, past_key_values, attention_mask, **kwargs)`
- `generate(self, *args, **kwargs)`
- `post_init(self, state_dict)`
- `push_to_hub(self, *args, **kwargs)`
- `state_dict(self, *args, **kwargs)`

---

## Class: `BaseModelOutput`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `hf_model`

---

## Class: `BaseProcessor`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `eva_clip_processors`

### 属性 (Attributes)
- `transform`

### 方法 (Methods)
- `__call__(self, item)`
- `__init__(self)`

---

## Class: `BaseTrainer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `base`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `PyTorchModelHubMixin`

### 属性 (Attributes)
- `config`

### 方法 (Methods)
- `__init__(self, config)`
- `_save_pretrained(self, save_directory)`
- `compute_rewards(self, *args)`
- `loss(self, *args)`
- `step(self, *args)`

---

## Class: `BertAttention`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `qformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `output`
- `pruned_heads`
- `self`

### 方法 (Methods)
- `__init__(self, config, is_cross_attention)`
- `forward(self, hidden_states, attention_mask, head_mask, encoder_hidden_states, encoder_attention_mask, past_key_value, output_attentions)`
- `prune_heads(self, heads)`

---

## Class: `BertEmbeddings`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `qformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `LayerNorm`
- `config`
- `dropout`
- `position_embedding_type`
- `position_embeddings`
- `word_embeddings`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, input_ids, position_ids, query_embeds, past_key_values_length)`

---

## Class: `BertEncoder`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `qformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `config`
- `layer`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, hidden_states, attention_mask, head_mask, encoder_hidden_states, encoder_attention_mask, past_key_values, use_cache, output_attentions, output_hidden_states, return_dict, query_length)`

---

## Class: `BertForMaskedLM`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `qformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `BertPreTrainedModel`

### 属性 (Attributes)
- `_keys_to_ignore_on_load_missing`
- `_keys_to_ignore_on_load_unexpected`
- `bert`
- `cls`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, input_ids, attention_mask, position_ids, head_mask, query_embeds, encoder_hidden_states, encoder_attention_mask, labels, output_attentions, output_hidden_states, return_dict, return_logits, is_decoder)`
- `get_output_embeddings(self)`
- `set_output_embeddings(self, new_embeddings)`

---

## Class: `BertIntermediate`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `qformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `dense`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, hidden_states)`

---

## Class: `BertLMHeadModel`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `qformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `BertPreTrainedModel`

### 属性 (Attributes)
- `_keys_to_ignore_on_load_missing`
- `_keys_to_ignore_on_load_unexpected`
- `bert`
- `cls`

### 方法 (Methods)
- `__init__(self, config)`
- `_reorder_cache(self, past, beam_idx)`
- `forward(self, input_ids, attention_mask, position_ids, head_mask, query_embeds, encoder_hidden_states, encoder_attention_mask, labels, past_key_values, use_cache, output_attentions, output_hidden_states, return_dict, return_logits, is_decoder, reduction)`
- `get_output_embeddings(self)`
- `prepare_inputs_for_generation(self, input_ids, query_embeds, past, attention_mask, **model_kwargs)`
- `set_output_embeddings(self, new_embeddings)`

---

## Class: `BertLMPredictionHead`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `qformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `bias`
- `decoder`
- `transform`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, hidden_states)`

---

## Class: `BertLayer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `qformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `attention`
- `chunk_size_feed_forward`
- `config`
- `intermediate`
- `intermediate_query`
- `layer_num`
- `output`
- `output_query`
- `seq_len_dim`

### 方法 (Methods)
- `__init__(self, config, layer_num)`
- `feed_forward_chunk(self, attention_output)`
- `feed_forward_chunk_query(self, attention_output)`
- `forward(self, hidden_states, attention_mask, head_mask, encoder_hidden_states, encoder_attention_mask, past_key_value, output_attentions, query_length)`

---

## Class: `BertModel`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `qformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `BertPreTrainedModel`

### 属性 (Attributes)
- `config`
- `embeddings`
- `encoder`
- `pooler`

### 方法 (Methods)
- `__init__(self, config, add_pooling_layer)`
- `_prune_heads(self, heads_to_prune)`
- `forward(self, input_ids, attention_mask, position_ids, head_mask, query_embeds, encoder_hidden_states, encoder_attention_mask, past_key_values, use_cache, output_attentions, output_hidden_states, return_dict, is_decoder)`
- `get_extended_attention_mask(self, attention_mask: Tensor, input_shape: Tuple[int], device: device, is_decoder: bool, has_query: bool) -> Tensor`
- `get_input_embeddings(self)`
- `set_input_embeddings(self, value)`

---

## Class: `BertOnlyMLMHead`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `qformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `predictions`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, sequence_output)`

---

## Class: `BertOutput`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `qformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `LayerNorm`
- `dense`
- `dropout`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, hidden_states, input_tensor)`

---

## Class: `BertPooler`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `qformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `activation`
- `dense`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, hidden_states)`

---

## Class: `BertPreTrainedModel`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `qformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `PreTrainedModel`

### 属性 (Attributes)
- `_keys_to_ignore_on_load_missing`
- `base_model_prefix`
- `config_class`

### 方法 (Methods)
- `_init_weights(self, module)`

---

## Class: `BertPredictionHeadTransform`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `qformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `LayerNorm`
- `dense`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, hidden_states)`

---

## Class: `BertSelfAttention`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `qformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `all_head_size`
- `attention_head_size`
- `config`
- `dropout`
- `num_attention_heads`
- `position_embedding_type`
- `query`
- `save_attention`

### 方法 (Methods)
- `__init__(self, config, is_cross_attention)`
- `forward(self, hidden_states, attention_mask, head_mask, encoder_hidden_states, encoder_attention_mask, past_key_value, output_attentions)`
- `get_attention_map(self)`
- `get_attn_gradients(self)`
- `save_attention_map(self, attention_map)`
- `save_attn_gradients(self, attn_gradients)`
- `transpose_for_scores(self, x)`

---

## Class: `BertSelfOutput`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `qformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `LayerNorm`
- `dense`
- `dropout`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, hidden_states, input_tensor)`

---

## Class: `BestOfNSampler`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `best_of_n_sampler`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `object`

### 属性 (Attributes)
- `gen_config`
- `length_sampler`
- `model`
- `n_candidates`
- `queries_to_scores`
- `sample_size`
- `tokenizer`

### 方法 (Methods)
- `__init__(self, model: PreTrainedModelWrapper, tokenizer: Union[PreTrainedTokenizer, PreTrainedTokenizerFast], queries_to_scores: Callable[[List[str]], List[float]], length_sampler: Any, sample_size: int, seed: Optional[int], n_candidates: int, generation_config: Optional[GenerationConfig]) -> None`
- `generate(self, tokenized_query: Union[List[int], torch.Tensor, List[torch.Tensor], List[List[int]]], skip_special_tokens: bool, device: Optional[Union[str, torch.device]], **generation_kwargs) -> List[List[str]]`

---

## Class: `Block`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `eva_vit_model`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`, `nn.Module`

### 属性 (Attributes)
- `attn`
- `drop_path`
- `norm1`
- `norm2`
- `postnorm`

### 方法 (Methods)
- `__init__(self, dim, num_heads, mlp_ratio, qkv_bias, qk_scale, drop, attn_drop, drop_path, init_values, act_layer, norm_layer, window_size, attn_head_dim, xattn, rope, postnorm, subln, naiveswiglu)`
- `forward(self, x, rel_pos_bias, attn_mask)`

---

## Class: `Bottleneck`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modified_resnet`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `act1`
- `act2`
- `act3`
- `avgpool`
- `bn1`
- `bn2`
- `bn3`
- `conv1`
- `conv2`
- `conv3`
- `downsample`
- `expansion`
- `stride`

### 方法 (Methods)
- `__init__(self, inplanes, planes, stride)`
- `forward(self, x: torch.Tensor)`

---

## Class: `CLIP`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `model`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `ln_final`
- `logit_scale`
- `positional_embedding`
- `text_projection`
- `token_embedding`
- `transformer`
- `visual`
- `vocab_size`

### 方法 (Methods)
- `__init__(self, embed_dim: int, vision_cfg: CLIPVisionCfg, text_cfg: CLIPTextCfg, quick_gelu: bool, cast_dtype: Optional[torch.dtype])`
- `encode_image(self, image, normalize: bool)`
- `encode_text(self, text, normalize: bool)`
- `forward(self, image, text)`
- `lock_image_tower(self, unlocked_groups, freeze_bn_stats)`
- `no_weight_decay(self)`
- `set_grad_checkpointing(self, enable)`

---

## Class: `CLIPTextCfg`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `model`

### 属性 (Attributes)
- `attn_mask: bool`
- `context_length: int`
- `fusedLN: bool`
- `heads: int`
- `hf_model_name: str`
- `hf_model_pretrained: bool`
- `hf_tokenizer_name: str`
- `layers: int`
- `ls_init_value: Optional[float]`
- `masked_language_modeling: bool`
- `pooler_type: str`
- `proj: str`
- `vocab_size: int`
- `width: int`
- `xattn: bool`

---

## Class: `CLIPVisionCfg`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `model`

### 属性 (Attributes)
- `drop_path_rate: Optional[float]`
- `eva_model_name: str`
- `fusedLN: bool`
- `global_average_pool: bool`
- `head_width: int`
- `image_size: Union[Tuple[int, int], int]`
- `intp_freq: bool`
- `layers: Union[Tuple[int, int, int, int], int]`
- `ls_init_value: Optional[float]`
- `mlp_ratio: float`
- `naiveswiglu: bool`
- `patch_dropout: float`
- `patch_size: int`
- `postnorm: bool`
- `pt_hw_seq_len: int`
- `qkv_bias: bool`
- `rope: bool`
- `subln: bool`
- `timm_model_name: str`
- `timm_model_pretrained: bool`
- `timm_pool: str`
- `timm_proj: str`
- `timm_proj_bias: bool`
- `use_rms_norm: bool`
- `width: int`
- `xattn: bool`

---

## Class: `CLIPVisionTower`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `clip_encoder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `is_loaded`
- `select_feature`
- `select_layer`
- `vision_tower_name`

### 方法 (Methods)
- `__init__(self, vision_tower, args, delay_load)`
- `config(self)`
- `device(self)`
- `dtype(self)`
- `dummy_feature(self)`
- `feature_select(self, image_forward_outs)`
- `forward(self, images)`
- `hidden_size(self)`
- `image_size(self)`
- `load_model(self, device_map)`
- `num_patches(self)`
- `num_patches_per_side(self)`

---

## Class: `CLIPVisionTowerS2`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `clip_encoder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `CLIPVisionTower`

### 属性 (Attributes)
- `s2_image_size`
- `s2_scales`
- `s2_split_size`

### 方法 (Methods)
- `__init__(self, vision_tower, args, delay_load)`
- `forward(self, images)`
- `forward_feature(self, images)`
- `hidden_size(self)`
- `load_model(self, device_map)`

---

## Class: `ChatMlSpecialTokens`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `utils`

### 属性 (Attributes)
- `bos_token: str`
- `eos_token: str`
- `pad_token: str`

### 方法 (Methods)
- `assistant(self)`
- `chat_template(self)`
- `system(self)`
- `user(self)`

---

## Class: `ClipLoss`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `loss`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `cache_labels`
- `gather_with_grad`
- `label_smoothing_cross_entropy`
- `labels`
- `local_loss`
- `prev_num_logits`
- `rank`
- `use_horovod`
- `world_size`

### 方法 (Methods)
- `__init__(self, local_loss, gather_with_grad, cache_labels, rank, world_size, use_horovod, smoothing)`
- `forward(self, image_features, text_features, logit_scale)`

---

## Class: `ClsPooler`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `hf_model`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `cls_token_position`
- `use_pooler_output`

### 方法 (Methods)
- `__init__(self, use_pooler_output)`
- `forward(self, x: BaseModelOutput, attention_mask: TensorType)`

---

## Class: `ConstantLengthDataset`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `utils`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `IterableDataset`

### 属性 (Attributes)
- `add_special_tokens`
- `append_concat_token`
- `concat_token_id`
- `current_size`
- `dataset`
- `infinite`
- `max_buffer_size`
- `seq_length`
- `shuffle`
- `tokenizer`

### 方法 (Methods)
- `__init__(self, tokenizer, dataset, dataset_text_field, formatting_func, infinite, seq_length, num_of_sequences, chars_per_token, eos_token_id, shuffle, append_concat_token, add_special_tokens)`
- `__iter__(self)`
- `__len__(self)`

---

## Class: `Controller`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `controller`

### 属性 (Attributes)
- `dispatch_method`
- `heart_beat_thread`
- `worker_info`

### 方法 (Methods)
- `__init__(self, dispatch_method: str)`
- `get_worker_address(self, model_name: str)`
- `get_worker_status(self, worker_name: str)`
- `list_models(self)`
- `receive_heart_beat(self, worker_name: str, queue_length: int)`
- `refresh_all_workers(self)`
- `register_worker(self, worker_name: str, check_heart_beat: bool, worker_status: dict)`
- `remove_stable_workers_by_expiration(self)`
- `remove_worker(self, worker_name: str)`
- `worker_api_generate_stream(self, params)`
- `worker_api_get_status(self)`

---

## Class: `Conversation`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `conversation`

### 属性 (Attributes)
- `messages: List[List[str]]`
- `offset: int`
- `roles: List[str]`
- `sep2: str`
- `sep: str`
- `sep_style: SeparatorStyle`
- `skip_next: bool`
- `stop_str: Union[str, List[str]]`
- `stop_token_ids: List[int]`
- `system: str`
- `tokenizer: Any`
- `tokenizer_id: str`
- `version: str`

### 方法 (Methods)
- `append_message(self, role, message)`
- `copy(self)`
- `dict(self)`
- `get_images(self, return_pil, return_path)`
- `get_prompt(self)`
- `is_image_file(self, filename)`
- `is_video_file(self, filename)`
- `process_image(self, image, image_process_mode, return_pil, image_format)`
- `to_gradio_chatbot(self)`

---

## Class: `CustomAttention`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `transformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `attn_drop`
- `head_dim`
- `in_proj_weight`
- `logit_scale_max`
- `num_heads`
- `out_drop`
- `out_proj`
- `scale`
- `scale_heads`
- `scaled_cosine`
- `xattn`
- `xattn_drop`

### 方法 (Methods)
- `__init__(self, dim, num_heads, qkv_bias, scaled_cosine, scale_heads, logit_scale_max, attn_drop, proj_drop, xattn)`
- `forward(self, query: torch.Tensor, key: torch.Tensor, value: torch.Tensor, attn_mask: Optional[torch.Tensor])`

---

## Class: `CustomCLIP`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `model`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `logit_scale`
- `text`
- `visual`

### 方法 (Methods)
- `__init__(self, embed_dim: int, vision_cfg: CLIPVisionCfg, text_cfg: CLIPTextCfg, quick_gelu: bool, cast_dtype: Optional[torch.dtype], itm_task: bool)`
- `encode_image(self, image, normalize: bool)`
- `encode_text(self, text, normalize: bool)`
- `forward(self, image, text)`
- `lock_image_tower(self, unlocked_groups, freeze_bn_stats)`
- `lock_text_tower(self, unlocked_layers: int, freeze_layer_norm: bool)`
- `no_weight_decay(self)`
- `set_grad_checkpointing(self, enable)`

---

## Class: `CustomResidualAttentionBlock`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `transformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `attn`
- `ln_1`
- `ln_1_k`
- `ln_1_v`
- `ln_2`
- `ln_attn`
- `ls_1`
- `ls_2`
- `mlp`

### 方法 (Methods)
- `__init__(self, d_model: int, n_head: int, mlp_ratio: float, ls_init_value: float, act_layer: Callable, norm_layer: Callable, scale_cosine_attn: bool, scale_heads: bool, scale_attn: bool, scale_fc: bool, cross_attn: bool, xattn: bool)`
- `forward(self, q: torch.Tensor, k: torch.Tensor, v: torch.Tensor, attn_mask: Optional[torch.Tensor])`

---

## Class: `CustomTransformer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `transformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `grad_checkpointing`
- `layers`
- `resblocks`
- `width`
- `xattn`

### 方法 (Methods)
- `__init__(self, width: int, layers: int, heads: int, mlp_ratio: float, ls_init_value: float, act_layer: Callable, norm_layer: Callable, scale_cosine_attn: bool, scale_heads: bool, scale_attn: bool, scale_fc: bool, cross_attn: bool, xattn: bool)`
- `forward(self, q: torch.Tensor, k: torch.Tensor, v: torch.Tensor, attn_mask: Optional[torch.Tensor])`
- `get_cast_dtype(self) -> torch.dtype`

---

## Class: `DDPOConfig`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `ddpo_config`

### 属性 (Attributes)
- `accelerator_kwargs: dict`
- `allow_tf32: bool`
- `async_reward_computation: bool`
- `exp_name: str`
- `log_with: Optional[Literal['wandb', 'tensorboard']]`
- `logdir: str`
- `max_workers: int`
- `mixed_precision: str`
- `negative_prompts: Optional[str]`
- `num_checkpoint_limit: int`
- `num_epochs: int`
- `per_prompt_stat_tracking: bool`
- `per_prompt_stat_tracking_buffer_size: int`
- `per_prompt_stat_tracking_min_count: int`
- `project_kwargs: dict`
- `resume_from: Optional[str]`
- `run_name: Optional[str]`
- `sample_batch_size: int`
- `sample_eta: float`
- `sample_guidance_scale: float`
- `sample_num_batches_per_epoch: int`
- `sample_num_steps: int`
- `save_freq: int`
- `seed: int`
- `tracker_kwargs: dict`
- `tracker_project_name: str`
- `train_adam_beta1: float`
- `train_adam_beta2: float`
- `train_adam_epsilon: float`
- `train_adam_weight_decay: float`
- `train_adv_clip_max: float`
- `train_batch_size: int`
- `train_cfg: bool`
- `train_clip_range: float`
- `train_gradient_accumulation_steps: int`
- `train_learning_rate: float`
- `train_max_grad_norm: float`
- `train_num_inner_epochs: int`
- `train_timestep_fraction: float`
- `train_use_8bit_adam: bool`

### 方法 (Methods)
- `__post_init__(self)`
- `to_dict(self)`

---

## Class: `DDPOPipelineOutput`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_sd_base`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `object`

### 属性 (Attributes)
- `images: torch.Tensor`
- `latents: torch.Tensor`
- `log_probs: torch.Tensor`

---

## Class: `DDPOSchedulerOutput`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_sd_base`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `object`

### 属性 (Attributes)
- `latents: torch.Tensor`
- `log_probs: torch.Tensor`

---

## Class: `DDPOStableDiffusionPipeline`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_sd_base`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `object`

### 方法 (Methods)
- `__call__(self, *args, **kwargs) -> DDPOPipelineOutput`
- `autocast(self)`
- `get_trainable_layers(self, *args, **kwargs)`
- `load_checkpoint(self, *args, **kwargs)`
- `save_checkpoint(self, *args, **kwargs)`
- `save_pretrained(self, *args, **kwargs)`
- `scheduler(self)`
- `scheduler_step(self, *args, **kwargs) -> DDPOSchedulerOutput`
- `set_progress_bar_config(self, *args, **kwargs)`
- `text_encoder(self)`
- `tokenizer(self)`
- `unet(self)`
- `vae(self)`

---

## Class: `DDPOTrainer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `ddpo_trainer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `BaseTrainer`

### 属性 (Attributes)
- `_tag_names`
- `accelerator`
- `autocast`
- `config`
- `image_samples_callback`
- `neg_prompt_embed`
- `num_train_timesteps`
- `optimizer`
- `prompt_fn`
- `reward_fn`
- `sd_pipeline`

### 方法 (Methods)
- `__init__(self, config: DDPOConfig, reward_function: Callable[[torch.Tensor, Tuple[str], Tuple[Any]], torch.Tensor], prompt_function: Callable[[], Tuple[str, Any]], sd_pipeline: DDPOStableDiffusionPipeline, image_samples_hook: Optional[Callable[[Any, Any, Any], Any]])`
- `_config_check(self) -> Tuple[bool, str]`
- `_generate_samples(self, iterations, batch_size)`
- `_load_model_hook(self, models, input_dir)`
- `_save_model_hook(self, models, weights, output_dir)`
- `_save_pretrained(self, save_directory)`
- `_setup_optimizer(self, trainable_layers_parameters)`
- `_train_batched_samples(self, inner_epoch, epoch, global_step, batched_samples)`
- `calculate_loss(self, latents, timesteps, next_latents, log_probs, advantages, embeds)`
- `compute_rewards(self, prompt_image_pairs, is_async)`
- `create_model_card(self, path: str, model_name: Optional[str]) -> None`
- `loss(self, advantages: torch.Tensor, clip_range: float, ratio: torch.Tensor)`
- `step(self, epoch: int, global_step: int)`
- `train(self, epochs: Optional[int])`

---

## Class: `DPODataCollator`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `train_dpo`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `DPODataCollatorWithPadding`

### 方法 (Methods)
- `__call__(self, features: List[Dict[str, Any]]) -> Dict[str, Any]`
- `collate(self, batch)`
- `tokenize_batch_element(self, prompt: str, chosen: str, rejected: str, has_image: bool) -> Dict`

---

## Class: `DPODataCollatorWithPadding`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `utils`

### 属性 (Attributes)
- `is_encoder_decoder: Optional[bool]`
- `label_pad_token_id: int`
- `pad_token_id: int`
- `tokenizer: PreTrainedTokenizerBase`

### 方法 (Methods)
- `__call__(self, features: List[Dict[str, Any]]) -> Dict[str, Any]`

---

## Class: `DPODataset`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `train_dpo`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `Dataset`

### 属性 (Attributes)
- `data_args`
- `list_data_dict`
- `tokenizer`

### 方法 (Methods)
- `__getitem__(self, i) -> Dict[str, torch.Tensor]`
- `__init__(self, data_path: str, tokenizer: transformers.PreTrainedTokenizer, data_args: DataArguments)`
- `__len__(self)`
- `_get_item(self, i) -> Dict[str, torch.Tensor]`
- `lengths(self)`
- `modality_lengths(self)`
- `process_image(self, image_file)`

---

## Class: `DPOTrainer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `dpo_trainer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `Trainer`

### 属性 (Attributes)
- `_peft_has_been_casted_to_bf16`
- `_precomputed_eval_ref_log_probs`
- `_precomputed_train_ref_log_probs`
- `_stored_metrics`
- `_tag_names`
- `beta`
- `dataset_num_proc`
- `dpo_alpha`
- `gamma`
- `generate_during_eval`
- `is_peft_model`
- `label_pad_token_id`
- `label_smoothing`
- `loss_type`
- `max_length`
- `max_prompt_length`
- `max_target_length`
- `model_adapter_name`
- `padding_value`
- `precompute_ref_log_probs`
- `ref_adapter_name`
- `reference_free`
- `tokenizer`
- `truncation_mode`

### 方法 (Methods)
- `__init__(self, model: Optional[Union[PreTrainedModel, nn.Module, str]], ref_model: Optional[Union[PreTrainedModel, nn.Module, str]], dpo_alpha: float, beta: float, gamma: float, label_smoothing: float, loss_type: Literal['sigmoid', 'hinge', 'ipo', 'kto_pair'], args: Optional[TrainingArguments], data_collator: Optional[DataCollator], label_pad_token_id: int, padding_value: Optional[int], truncation_mode: str, train_dataset: Optional[Dataset], eval_dataset: Optional[Union[Dataset, Dict[str, Dataset]]], tokenizer: Optional[PreTrainedTokenizerBase], model_init: Optional[Callable[[], PreTrainedModel]], callbacks: Optional[List[TrainerCallback]], optimizers: Tuple[torch.optim.Optimizer, torch.optim.lr_scheduler.LambdaLR], preprocess_logits_for_metrics: Optional[Callable[[torch.Tensor, torch.Tensor], torch.Tensor]], max_length: Optional[int], max_prompt_length: Optional[int], max_target_length: Optional[int], peft_config: Optional[Dict], is_encoder_decoder: Optional[bool], disable_dropout: bool, generate_during_eval: bool, compute_metrics: Optional[Callable[[EvalLoopOutput], Dict]], precompute_ref_log_probs: bool, dataset_num_proc: Optional[int], model_init_kwargs: Optional[Dict], ref_model_init_kwargs: Optional[Dict], model_adapter_name: Optional[str], ref_adapter_name: Optional[str], reference_free: bool)`
- `_prepare_deepspeed(self, model: PreTrainedModelWrapper)`
- `build_tokenized_answer(self, prompt, answer)`
- `compute_loss(self, model: Union[PreTrainedModel, nn.Module], inputs: Dict[str, Union[torch.Tensor, Any]], return_outputs) -> Union[torch.Tensor, Tuple[torch.Tensor, Dict[str, torch.Tensor]]]`
- `compute_reference_log_probs(self, padded_batch: Dict) -> Dict`
- `concatenated_forward(self, model: nn.Module, batch: Dict[str, Union[List, torch.LongTensor]]) -> Tuple[torch.FloatTensor, torch.FloatTensor, torch.FloatTensor, torch.FloatTensor]`
- `concatenated_inputs(batch: Dict[str, Union[List, torch.LongTensor]], is_encoder_decoder: bool, label_pad_token_id: int, padding_value: int, device: Optional[torch.device]) -> Dict[str, torch.LongTensor]`
- `dpo_loss(self, policy_chosen_logps: torch.FloatTensor, policy_rejected_logps: torch.FloatTensor, reference_chosen_logps: torch.FloatTensor, reference_rejected_logps: torch.FloatTensor) -> Tuple[torch.FloatTensor, torch.FloatTensor, torch.FloatTensor]`
- `evaluation_loop(self, dataloader: DataLoader, description: str, prediction_loss_only: Optional[bool], ignore_keys: Optional[List[str]], metric_key_prefix: str) -> EvalLoopOutput`
- `get_batch_logps(logits: torch.FloatTensor, labels: torch.LongTensor, average_log_prob: bool, label_pad_token_id: int, is_encoder_decoder: bool) -> torch.FloatTensor`
- `get_batch_loss_metrics(self, model, batch: Dict[str, Union[List, torch.LongTensor]], train_eval: Literal['train', 'eval'])`
- `get_batch_samples(self, model, batch: Dict[str, torch.LongTensor]) -> Tuple[str, str]`
- `get_eval_dataloader(self, eval_dataset: Optional[Dataset]) -> DataLoader`
- `get_sft_loss(self, logits, labels)`
- `get_train_dataloader(self) -> DataLoader`
- `log(self, logs: Dict[str, float]) -> None`
- `null_ref_context(self)`
- `prediction_step(self, model: Union[PreTrainedModel, nn.Module], inputs: Dict[str, Union[torch.Tensor, Any]], prediction_loss_only: bool, ignore_keys: Optional[List[str]])`
- `push_to_hub(self, commit_message: Optional[str], blocking: bool, **kwargs) -> str`
- `store_metrics(self, metrics: Dict[str, float], train_eval: Literal['train', 'eval']) -> None`
- `tokenize_row(self, feature, model: Optional[Union[PreTrainedModel, nn.Module]]) -> Dict`

---

## Class: `DataArguments`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `train`

### 属性 (Attributes)
- `add_time_instruction: Optional[bool]`
- `data_path: str`
- `early_mix_text: bool`
- `force_sample: Optional[bool]`
- `frames_upbound: Optional[int]`
- `image_aspect_ratio: str`
- `image_crop_resolution: Optional[int]`
- `image_crop_resolution: int`
- `image_folder: Optional[str]`
- `image_grid_pinpoints: Optional[str]`
- `image_split_resolution: Optional[int]`
- `image_split_resolution: int`
- `input_prompt: Optional[str]`
- `is_multimodal: bool`
- `lazy_preprocess: bool`
- `num_sample: Optional[int]`
- `refine_prompt: Optional[bool]`
- `video_folder: Optional[str]`
- `video_fps: Optional[int]`

---

## Class: `DataCollatorForCompletionOnlyLM`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `utils`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `DataCollatorForLanguageModeling`

### 属性 (Attributes)
- `ignore_index`
- `instruction_template`
- `response_template`

### 方法 (Methods)
- `__init__(self, response_template: Union[str, List[int]], instruction_template: Union[str, List[int]], *args, **kwargs)`
- `torch_call(self, examples: List[Union[List[int], Any, Dict[str, Any]]]) -> Dict[str, Any]`

---

## Class: `DataCollatorForSupervisedDataset`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `train`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `object`

### 属性 (Attributes)
- `tokenizer: transformers.PreTrainedTokenizer`

### 方法 (Methods)
- `__call__(self, instances: Sequence[Dict]) -> Dict[str, torch.Tensor]`
- `pad_sequence(self, input_ids, batch_first, padding_value)`

---

## Class: `DataProcessor`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `data_checker`

### 属性 (Attributes)
- `data`
- `file_path`
- `image_root`
- `video_root`

### 方法 (Methods)
- `__init__(self, file_path, image_root, video_root)`
- `check_image_and_structure(self, item)`
- `check_image_existence(self, data)`
- `check_item_structure(self, item)`
- `count_items(self)`
- `filter_data(self)`
- `load_data(self)`
- `load_json_data(self, json_path)`
- `process_images(self)`
- `stat_and_filter_data(self, threshold)`
- `stat_data(self)`

---

## Class: `DefaultDDPOStableDiffusionPipeline`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_sd_base`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `DDPOStableDiffusionPipeline`

### 属性 (Attributes)
- `pretrained_model`
- `pretrained_revision`
- `sd_pipeline`
- `use_lora`

### 方法 (Methods)
- `__call__(self, *args, **kwargs) -> DDPOPipelineOutput`
- `__init__(self, pretrained_model_name: str)`
- `autocast(self)`
- `get_trainable_layers(self)`
- `load_checkpoint(self, models, input_dir)`
- `save_checkpoint(self, models, weights, output_dir)`
- `save_pretrained(self, output_dir)`
- `scheduler(self)`
- `scheduler_step(self, *args, **kwargs) -> DDPOSchedulerOutput`
- `set_progress_bar_config(self, *args, **kwargs)`
- `text_encoder(self)`
- `tokenizer(self)`
- `unet(self)`
- `vae(self)`

---

## Class: `DispatchMethod`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `controller`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `Enum`

### 属性 (Attributes)
- `LOTTERY`
- `SHORTEST_QUEUE`

### 方法 (Methods)
- `from_str(cls, name)`

---

## Class: `DropPath`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `eva_vit_model`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`, `nn.Module`

### 属性 (Attributes)
- `drop_prob`

### 方法 (Methods)
- `__init__(self, drop_prob)`
- `extra_repr(self) -> str`
- `forward(self, x)`

---

## Class: `EVAEncoderWrapper`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `eva_vit`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `config`
- `model`

### 方法 (Methods)
- `__init__(self, vision_tower_pretrained, config)`
- `device(self)`
- `dtype(self)`
- `forward(self, image, **kwargs)`

---

## Class: `EVAVisionTransformer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `eva_vit_model`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`, `nn.Module`

### 属性 (Attributes)
- `blocks`
- `cls_token`
- `embed_dim`
- `fc_norm`
- `grad_checkpointing`
- `head`
- `image_size`
- `naiveswiglu`
- `norm`
- `num_classes`
- `num_features`
- `patch_dropout`
- `patch_embed`
- `pos_drop`
- `use_rel_pos_bias`

### 方法 (Methods)
- `__init__(self, img_size, patch_size, in_chans, num_classes, embed_dim, depth, num_heads, mlp_ratio, qkv_bias, qk_scale, drop_rate, attn_drop_rate, drop_path_rate, norm_layer, init_values, patch_dropout, use_abs_pos_emb, use_rel_pos_bias, use_shared_rel_pos_bias, rope, use_mean_pooling, init_scale, grad_checkpointing, xattn, postnorm, pt_hw_seq_len, intp_freq, naiveswiglu, subln)`
- `_init_weights(self, m)`
- `fix_init_weight(self)`
- `forward(self, x, return_all_features)`
- `forward_features(self, x, return_all_features)`
- `get_cast_dtype(self) -> torch.dtype`
- `get_classifier(self)`
- `get_num_layers(self)`
- `lock(self, unlocked_groups, freeze_bn_stats)`
- `no_weight_decay(self)`
- `reset_classifier(self, num_classes, global_pool)`
- `set_grad_checkpointing(self, enable)`

---

## Class: `EvaClipImageBaseProcessor`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `eva_clip_processors`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `BaseProcessor`

### 属性 (Attributes)
- `mean`
- `normalize`
- `std`

### 方法 (Methods)
- `__init__(self, mean, std)`
- `image_mean(self)`

---

## Class: `EvaClipImageTrainProcessor`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `eva_clip_processors`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `EvaClipImageBaseProcessor`

### 属性 (Attributes)
- `image_size`
- `transform`

### 方法 (Methods)
- `__call__(self, item)`
- `__init__(self, image_size, mean, std, min_scale, max_scale)`
- `crop_size(self)`
- `preprocess(self, images, return_tensors)`
- `size(self)`

---

## Class: `EvaClipVisionTower`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `eva_clip_encoder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `config`
- `is_loaded`
- `vision_tower_name`
- `vision_tower_pretrained`

### 方法 (Methods)
- `__init__(self, vision_tower, args, delay_load)`
- `device(self)`
- `dtype(self)`
- `forward(self, images)`
- `hidden_size(self)`
- `image_size(self)`
- `load_model(self, device_map)`
- `num_patches(self)`
- `num_patches_per_side(self)`

---

## Class: `EvaViTWrapper`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `eva_vit`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `args`
- `is_loaded`
- `model_config`
- `pretrained`
- `select_feature`
- `select_layer`
- `vision_tower_name`

### 方法 (Methods)
- `__init__(self, vision_tower, args, delay_load)`
- `config(self)`
- `dummy_feature(self)`
- `feature_select(self, image_features)`
- `forward(self, images)`
- `hidden_size(self)`
- `image_size(self)`
- `load_model(self)`
- `num_patches(self)`
- `num_patches_per_side(self)`
- `train(self, mode)`

---

## Class: `Eval`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `evaluate_interleave`

### 属性 (Attributes)
- `commaStrip`
- `periodStrip`
- `punct`

### 方法 (Methods)
- `__init__(self)`
- `evaluate_multi_choice_image(self, preditions)`
- `evaluate_multichoice(self, preditions)`
- `evaluate_rouge(self, preds)`
- `judge_multi_choice(self, sample)`
- `process(self, answer)`
- `processPunctuation(self, inText)`
- `process_sample(self, sample)`

---

## Class: `FixedKLController`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `utils`

### 属性 (Attributes)
- `value`

### 方法 (Methods)
- `__init__(self, kl_coef)`
- `update(self, current, n_steps)`

---

## Class: `HFTextEncoder`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `hf_model`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `output_dim`
- `tokenizer`

### 方法 (Methods)
- `__init__(self, model_name_or_path: str, output_dim: int, tokenizer_name: str, config: PretrainedConfig, pooler_type: str, proj: str, pretrained: bool, masked_language_modeling: bool)`
- `forward(self, x: TensorType) -> TensorType`
- `forward_mlm(self, input_ids, image_embeds, mlm_probability)`
- `get_num_layers(self)`
- `init_parameters(self)`
- `lock(self, unlocked_layers: int, freeze_layer_norm: bool)`
- `mask(self, input_ids, vocab_size, device, targets, masked_indices, probability_matrix)`
- `set_grad_checkpointing(self, enable)`

---

## Class: `HFTokenizer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `tokenizer`

### 属性 (Attributes)
- `tokenizer`

### 方法 (Methods)
- `__call__(self, texts: Union[str, List[str]], context_length: int) -> torch.Tensor`
- `__init__(self, tokenizer_name: str)`

---

## Class: `HFVisionTower`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `hf_vision`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `is_loaded`
- `select_feature`
- `select_layer`
- `vision_tower_name`

### 方法 (Methods)
- `__init__(self, vision_tower, args, delay_load)`
- `dummy_feature(self)`
- `feature_select(self, image_forward_outs)`
- `forward(self, images)`
- `hidden_size(self)`
- `image_size(self)`
- `load_model(self)`
- `num_patches(self)`
- `num_patches_per_side(self)`

---

## Class: `IdentityMap`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `builder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`, `torch.nn.Module`

### 方法 (Methods)
- `__init__(self)`
- `config(self)`
- `forward(self, x, *args, **kwargs)`

---

## Class: `ImageBindWrapper`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `imagebind`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `is_loaded`
- `select_feature`
- `select_layer`
- `vision_tower_name`

### 方法 (Methods)
- `__init__(self, vision_tower, select_layer, select_feature, delay_load)`
- `device(self)`
- `dtype(self)`
- `dummy_feature(self)`
- `forward(self, x)`
- `hidden_size(self)`
- `load_model(self)`
- `train(self, mode)`

---

## Class: `IterativeSFTTrainer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `iterative_sft_trainer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `Trainer`

### 属性 (Attributes)
- `is_encoder_decoder`
- `is_peft_model`
- `max_length`
- `optimize_device_cache`
- `tokenizer`
- `truncation_mode`

### 方法 (Methods)
- `__init__(self, model: PreTrainedModel, args: TrainingArguments, tokenizer: PreTrainedTokenizerBase, optimizers: Tuple[torch.optim.Optimizer, torch.optim.lr_scheduler.LambdaLR], data_collator: Optional[DataCollator], eval_dataset: Optional[Union[Dataset, Dict[str, Dataset]]], max_length: Optional[int], truncation_mode: Optional[str], preprocess_logits_for_metrics: Optional[Callable[[torch.Tensor, torch.Tensor], torch.Tensor]], compute_metrics: Optional[Callable[[EvalLoopOutput], Dict]], optimize_device_cache: Optional[bool])`
- `_maybe_log_save_evaluate(self)`
- `_step_safety_checker(input_ids: List[torch.LongTensor], attention_mask: List[torch.LongTensor], labels: List[torch.LongTensor], texts: List[str], texts_labels: List[str])`
- `prepare_model_inputs(self, input_ids: torch.Tensor, attention_mask: torch.Tensor, labels: torch.Tensor)`
- `step(self, input_ids: Optional[List[torch.LongTensor]], attention_mask: Optional[List[torch.LongTensor]], labels: Optional[List[torch.LongTensor]], texts: Optional[List[str]], texts_labels: Optional[List[str]])`

---

## Class: `KeywordsStoppingCriteria`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `mm_utils`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `StoppingCriteria`

### 属性 (Attributes)
- `keyword_ids`
- `keywords`
- `start_len`
- `tokenizer`

### 方法 (Methods)
- `__call__(self, output_ids: torch.LongTensor, scores: torch.FloatTensor, **kwargs) -> bool`
- `__init__(self, keywords, tokenizer, input_ids)`

---

## Class: `LLaVADPOTrainer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_trainer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `DPOTrainer`

### 方法 (Methods)
- `_get_train_sampler(self) -> Optional[torch.utils.data.Sampler]`
- `_save(self, output_dir: Optional[str], state_dict)`
- `_save_checkpoint(self, model, trial, metrics)`

---

## Class: `LLaVAEvalTrainer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_trainer_eval`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LLaVATrainer`

### 方法 (Methods)
- `evaluate(self, evaluate_args)`

---

## Class: `LLaVATrainer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_trainer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `Trainer`

### 方法 (Methods)
- `_get_train_sampler(self) -> Optional[torch.utils.data.Sampler]`
- `_save(self, output_dir: Optional[str], state_dict)`
- `_save_checkpoint(self, model, trial, metrics)`
- `create_accelerator_and_postprocess(self)`
- `create_optimizer(self)`
- `get_train_dataloader(self) -> DataLoader`

---

## Class: `LayerNorm`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `transformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.LayerNorm`, `nn.LayerNorm`

### 方法 (Methods)
- `forward(self, x: torch.Tensor)`

---

## Class: `LayerNormFp32`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `transformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.LayerNorm`

### 方法 (Methods)
- `__init__(self, *args, **kwargs)`
- `forward(self, x: torch.Tensor)`

---

## Class: `LayerScale`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `transformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `gamma`
- `inplace`

### 方法 (Methods)
- `__init__(self, dim, init_values, inplace)`
- `forward(self, x)`

---

## Class: `LazySupervisedDataset`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `train`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `Dataset`

### 属性 (Attributes)
- `data_args`
- `list_data_dict`
- `tokenizer`

### 方法 (Methods)
- `__getitem__(self, i) -> Dict[str, torch.Tensor]`
- `__init__(self, data_path: str, tokenizer: transformers.PreTrainedTokenizer, data_args: DataArguments)`
- `__len__(self)`
- `_get_item(self, i) -> Dict[str, torch.Tensor]`
- `lengths(self)`
- `modality_lengths(self)`
- `process_image(self, image_file, overwrite_image_aspect_ratio)`

---

## Class: `LengthGroupedSampler`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_trainer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `Sampler`

### 属性 (Attributes)
- `batch_size`
- `generator`
- `group_by_modality`
- `group_by_modality_auto`
- `lengths`
- `variable_length`
- `world_size`

### 方法 (Methods)
- `__init__(self, batch_size: int, world_size: int, lengths: Optional[List[int]], generator, variable_length: bool, group_by_modality: bool, group_by_modality_auto: bool)`
- `__iter__(self)`
- `__len__(self)`

---

## Class: `LengthSampler`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `core`

### 属性 (Attributes)
- `values`

### 方法 (Methods)
- `__call__(self) -> int`
- `__init__(self, min_value: int, max_value: int)`

---

## Class: `LlamaAttention`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_llama`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `attention_dropout`
- `config`
- `head_dim`
- `hidden_size`
- `is_causal`
- `k_proj`
- `layer_idx`
- `max_position_embeddings`
- `num_heads`
- `num_key_value_groups`
- `num_key_value_heads`
- `o_proj`
- `q_proj`
- `rope_theta`
- `v_proj`

### 方法 (Methods)
- `__init__(self, config: LlamaConfig, layer_idx: Optional[int])`
- `_init_rope(self)`
- `forward(self, hidden_states: torch.Tensor, attention_mask: Optional[torch.Tensor], position_ids: Optional[torch.LongTensor], past_key_value: Optional[Cache], output_attentions: bool, use_cache: bool, cache_position: Optional[torch.LongTensor], **kwargs) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]`

---

## Class: `LlamaDecoderLayer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_llama`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `hidden_size`
- `input_layernorm`
- `mlp`
- `post_attention_layernorm`
- `self_attn`

### 方法 (Methods)
- `__init__(self, config: LlamaConfig, layer_idx: int)`
- `forward(self, hidden_states: torch.Tensor, attention_mask: Optional[torch.Tensor], position_ids: Optional[torch.LongTensor], past_key_value: Optional[Tuple[torch.Tensor]], output_attentions: Optional[bool], use_cache: Optional[bool], cache_position: Optional[torch.LongTensor], **kwargs) -> Tuple[torch.FloatTensor, Optional[Tuple[torch.FloatTensor, torch.FloatTensor]]]`

---

## Class: `LlamaDynamicNTKScalingRotaryEmbedding`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_llama`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LlamaRotaryEmbedding`

### 方法 (Methods)
- `forward(self, x, position_ids, seq_len)`

---

## Class: `LlamaFlashAttention2`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_llama`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LlamaAttention`

### 属性 (Attributes)
- `_flash_attn_uses_top_left_mask`

### 方法 (Methods)
- `__init__(self, *args, **kwargs)`
- `_flash_attention_forward(self, query_states, key_states, value_states, attention_mask, query_length, dropout, softmax_scale)`
- `_upad_input(self, query_layer, key_layer, value_layer, attention_mask, query_length)`
- `forward(self, hidden_states: torch.Tensor, attention_mask: Optional[torch.LongTensor], position_ids: Optional[torch.LongTensor], past_key_value: Optional[Cache], output_attentions: bool, use_cache: bool, cache_position: Optional[torch.LongTensor], **kwargs) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]`

---

## Class: `LlamaForCausalLM`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_llama`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LlamaPreTrainedModel`

### 属性 (Attributes)
- `_tied_weights_keys`
- `lm_head`
- `model`
- `vocab_size`

### 方法 (Methods)
- `__init__(self, config)`
- `_reorder_cache(past_key_values, beam_idx)`
- `forward(self, input_ids: torch.LongTensor, attention_mask: Optional[torch.Tensor], position_ids: Optional[torch.LongTensor], past_key_values: Optional[List[torch.FloatTensor]], inputs_embeds: Optional[torch.FloatTensor], labels: Optional[torch.LongTensor], use_cache: Optional[bool], output_attentions: Optional[bool], output_hidden_states: Optional[bool], return_dict: Optional[bool], cache_position: Optional[torch.LongTensor]) -> Union[Tuple, CausalLMOutputWithPast]`
- `get_decoder(self)`
- `get_input_embeddings(self)`
- `get_output_embeddings(self)`
- `prepare_inputs_for_generation(self, input_ids, past_key_values, attention_mask, inputs_embeds, **kwargs)`
- `set_decoder(self, decoder)`
- `set_input_embeddings(self, value)`
- `set_output_embeddings(self, new_embeddings)`

---

## Class: `LlamaForQuestionAnswering`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_llama`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LlamaPreTrainedModel`

### 属性 (Attributes)
- `base_model_prefix`
- `qa_outputs`
- `transformer`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, input_ids: Optional[torch.LongTensor], attention_mask: Optional[torch.FloatTensor], position_ids: Optional[torch.LongTensor], past_key_values: Optional[List[torch.FloatTensor]], inputs_embeds: Optional[torch.FloatTensor], start_positions: Optional[torch.LongTensor], end_positions: Optional[torch.LongTensor], output_attentions: Optional[bool], output_hidden_states: Optional[bool], return_dict: Optional[bool]) -> Union[Tuple, QuestionAnsweringModelOutput]`
- `get_input_embeddings(self)`
- `set_input_embeddings(self, value)`

---

## Class: `LlamaForSequenceClassification`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_llama`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LlamaPreTrainedModel`

### 属性 (Attributes)
- `model`
- `num_labels`
- `score`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, input_ids: torch.LongTensor, attention_mask: Optional[torch.Tensor], position_ids: Optional[torch.LongTensor], past_key_values: Optional[List[torch.FloatTensor]], inputs_embeds: Optional[torch.FloatTensor], labels: Optional[torch.LongTensor], use_cache: Optional[bool], output_attentions: Optional[bool], output_hidden_states: Optional[bool], return_dict: Optional[bool]) -> Union[Tuple, SequenceClassifierOutputWithPast]`
- `get_input_embeddings(self)`
- `set_input_embeddings(self, value)`

---

## Class: `LlamaLinearScalingRotaryEmbedding`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_llama`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LlamaRotaryEmbedding`

### 方法 (Methods)
- `forward(self, x, position_ids, seq_len)`

---

## Class: `LlamaMLP`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_llama`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `act_fn`
- `config`
- `down_proj`
- `gate_proj`
- `hidden_size`
- `intermediate_size`
- `up_proj`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, x)`

---

## Class: `LlamaModel`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_llama`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LlamaPreTrainedModel`

### 属性 (Attributes)
- `embed_tokens`
- `gradient_checkpointing`
- `layers`
- `norm`
- `padding_idx`
- `vocab_size`

### 方法 (Methods)
- `__init__(self, config: LlamaConfig)`
- `_update_causal_mask(self, attention_mask, input_tensor)`
- `forward(self, input_ids: torch.LongTensor, attention_mask: Optional[torch.Tensor], position_ids: Optional[torch.LongTensor], past_key_values: Optional[List[torch.FloatTensor]], inputs_embeds: Optional[torch.FloatTensor], use_cache: Optional[bool], output_attentions: Optional[bool], output_hidden_states: Optional[bool], return_dict: Optional[bool], cache_position: Optional[torch.LongTensor]) -> Union[Tuple, BaseModelOutputWithPast]`
- `get_input_embeddings(self)`
- `set_input_embeddings(self, value)`

---

## Class: `LlamaPreTrainedModel`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_llama`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `PreTrainedModel`

### 属性 (Attributes)
- `_no_split_modules`
- `_skip_keys_device_placement`
- `_supports_cache_class`
- `_supports_flash_attn_2`
- `_supports_sdpa`
- `base_model_prefix`
- `config_class`
- `supports_gradient_checkpointing`

### 方法 (Methods)
- `_init_weights(self, module)`
- `_reset_cache(self)`
- `_setup_cache(self, cache_cls, max_batch_size, max_cache_len: Optional[int])`

---

## Class: `LlamaRMSNorm`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_llama`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `variance_epsilon`
- `weight`

### 方法 (Methods)
- `__init__(self, hidden_size, eps)`
- `forward(self, hidden_states)`

---

## Class: `LlamaRingFlashAttention2`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_llama`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LlamaAttention`

### 属性 (Attributes)
- `_flash_attn_uses_top_left_mask`

### 方法 (Methods)
- `__init__(self, *args, **kwargs)`
- `_flash_attention_forward(self, query_states, key_states, value_states, attention_mask, query_length, dropout, softmax_scale)`
- `_upad_input(self, query_layer, key_layer, value_layer, attention_mask, query_length)`
- `forward(self, hidden_states: torch.Tensor, attention_mask: Optional[torch.LongTensor], position_ids: Optional[torch.LongTensor], past_key_value: Optional[Cache], output_attentions: bool, use_cache: bool, cache_position: Optional[torch.LongTensor], **kwargs) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]`

---

## Class: `LlamaRotaryEmbedding`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_llama`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `base`
- `dim`
- `max_position_embeddings`
- `max_seq_len_cached`
- `scaling_factor`

### 方法 (Methods)
- `__init__(self, dim, max_position_embeddings, base, device, scaling_factor)`
- `cos_cached(self)`
- `forward(self, x, position_ids, seq_len)`
- `sin_cached(self)`

---

## Class: `LlamaSdpaAttention`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_llama`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LlamaAttention`

### 方法 (Methods)
- `forward(self, hidden_states: torch.Tensor, attention_mask: Optional[torch.Tensor], position_ids: Optional[torch.LongTensor], past_key_value: Optional[Cache], output_attentions: bool, use_cache: bool, cache_position: Optional[torch.LongTensor]) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]`

---

## Class: `LlavaConfig`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_llama`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LlamaConfig`

### 属性 (Attributes)
- `do_sample: bool`
- `max_new_tokens: int`
- `model_type`
- `temperature: float`
- `top_p: Optional[float]`

---

## Class: `LlavaGemmaConfig`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_gemma`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `GemmaConfig`

### 属性 (Attributes)
- `model_type`

---

## Class: `LlavaGemmaForCausalLM`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_gemma`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `GemmaForCausalLM`, `LlavaMetaForCausalLM`

### 属性 (Attributes)
- `config_class`
- `lm_head`
- `model`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, input_ids: torch.LongTensor, attention_mask: Optional[torch.Tensor], position_ids: Optional[torch.LongTensor], past_key_values: Optional[List[torch.FloatTensor]], inputs_embeds: Optional[torch.FloatTensor], labels: Optional[torch.LongTensor], use_cache: Optional[bool], output_attentions: Optional[bool], output_hidden_states: Optional[bool], images: Optional[torch.FloatTensor], image_sizes: Optional[List[List[int]]], return_dict: Optional[bool], cache_position: Optional[torch.LongTensor]) -> Union[Tuple, CausalLMOutputWithPast]`
- `generate(self, inputs: Optional[torch.Tensor], images: Optional[torch.Tensor], image_sizes: Optional[torch.Tensor], **kwargs) -> Union[GenerateOutput, torch.LongTensor]`
- `get_model(self)`
- `prepare_inputs_for_generation(self, input_ids, past_key_values, inputs_embeds, **kwargs)`

---

## Class: `LlavaGemmaModel`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_gemma`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LlavaMetaModel`, `GemmaModel`

### 属性 (Attributes)
- `config_class`

### 方法 (Methods)
- `__init__(self, config: GemmaConfig)`

---

## Class: `LlavaLlamaForCausalLM`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_llama`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LlamaForCausalLM`, `LlavaMetaForCausalLM`

### 属性 (Attributes)
- `config_class`
- `lm_head`
- `model`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, input_ids: torch.LongTensor, attention_mask: Optional[torch.Tensor], position_ids: Optional[torch.LongTensor], past_key_values: Optional[List[torch.FloatTensor]], inputs_embeds: Optional[torch.FloatTensor], labels: Optional[torch.LongTensor], use_cache: Optional[bool], output_attentions: Optional[bool], output_hidden_states: Optional[bool], images: Optional[torch.FloatTensor], image_sizes: Optional[List[List[int]]], return_dict: Optional[bool], modalities: Optional[List[str]], dpo_forward: Optional[bool], cache_position) -> Union[Tuple, CausalLMOutputWithPast]`
- `generate(self, inputs: Optional[torch.Tensor], images: Optional[torch.Tensor], image_sizes: Optional[torch.Tensor], modalities: Optional[List[str]], **kwargs) -> Union[GenerateOutput, torch.LongTensor]`
- `get_model(self)`
- `prepare_inputs_for_generation(self, input_ids, past_key_values, inputs_embeds, **kwargs)`

---

## Class: `LlavaLlamaModel`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_llama`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LlavaMetaModel`, `LlamaModel`

### 属性 (Attributes)
- `config_class`

### 方法 (Methods)
- `__init__(self, config: LlamaConfig)`

---

## Class: `LlavaMetaForCausalLM`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_arch`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `ABC`

### 方法 (Methods)
- `add_token_per_frame(self, image_feature)`
- `add_token_per_grid(self, image_feature)`
- `encode_images(self, images)`
- `encode_multimodals(self, videos_or_images, video_idx_in_batch, split_sizes)`
- `get_2dPool(self, image_feature, stride)`
- `get_model(self)`
- `get_vision_tower(self)`
- `initialize_vision_tokenizer(self, model_args, tokenizer)`
- `prepare_inputs_labels_for_multimodal(self, input_ids, position_ids, attention_mask, past_key_values, labels, images, modalities, image_sizes)`

---

## Class: `LlavaMetaModel`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_arch`

### 方法 (Methods)
- `__init__(self, config)`
- `get_vision_tower(self)`
- `initialize_vision_modules(self, model_args, fsdp)`

---

## Class: `LlavaMistralConfig`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_mistral`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `MistralConfig`

### 属性 (Attributes)
- `do_sample: bool`
- `max_new_tokens: int`
- `model_type`
- `temperature: float`
- `top_p: Optional[float]`

---

## Class: `LlavaMistralForCausalLM`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_mistral`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `MistralForCausalLM`, `LlavaMetaForCausalLM`

### 属性 (Attributes)
- `config_class`
- `lm_head`
- `model`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, input_ids: torch.LongTensor, attention_mask: Optional[torch.Tensor], position_ids: Optional[torch.LongTensor], past_key_values: Optional[List[torch.FloatTensor]], inputs_embeds: Optional[torch.FloatTensor], labels: Optional[torch.LongTensor], use_cache: Optional[bool], output_attentions: Optional[bool], output_hidden_states: Optional[bool], images: Optional[torch.FloatTensor], image_sizes: Optional[List[List[int]]], return_dict: Optional[bool], cache_position) -> Union[Tuple, CausalLMOutputWithPast]`
- `generate(self, inputs: Optional[torch.Tensor], images: Optional[torch.Tensor], image_sizes: Optional[torch.Tensor], **kwargs) -> Union[GenerateOutput, torch.LongTensor]`
- `get_model(self)`
- `prepare_inputs_for_generation(self, input_ids, past_key_values, inputs_embeds, **kwargs)`

---

## Class: `LlavaMistralModel`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_mistral`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LlavaMetaModel`, `MistralModel`

### 属性 (Attributes)
- `config_class`

### 方法 (Methods)
- `__init__(self, config: MistralConfig)`

---

## Class: `LlavaMixtralConfig`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_mixtral`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `MixtralConfig`

### 属性 (Attributes)
- `model_type`

---

## Class: `LlavaMixtralForCausalLM`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_mixtral`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `MixtralForCausalLM`, `LlavaMetaForCausalLM`

### 属性 (Attributes)
- `config_class`
- `lm_head`
- `model`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, input_ids: torch.LongTensor, attention_mask: Optional[torch.Tensor], position_ids: Optional[torch.LongTensor], past_key_values: Optional[List[torch.FloatTensor]], inputs_embeds: Optional[torch.FloatTensor], labels: Optional[torch.LongTensor], use_cache: Optional[bool], output_attentions: Optional[bool], output_hidden_states: Optional[bool], images: Optional[torch.FloatTensor], image_sizes: Optional[List[List[int]]], return_dict: Optional[bool], modalities: Optional[List[str]], dpo_forward: Optional[bool], cache_position) -> Union[Tuple, CausalLMOutputWithPast]`
- `generate(self, inputs: Optional[torch.Tensor], images: Optional[torch.Tensor], image_sizes: Optional[torch.Tensor], modalities: Optional[List[str]], **kwargs) -> Union[GenerateOutput, torch.LongTensor]`
- `get_model(self)`
- `prepare_inputs_for_generation(self, input_ids, past_key_values, inputs_embeds, **kwargs)`

---

## Class: `LlavaMixtralModel`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_mixtral`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LlavaMetaModel`, `MixtralModel`

### 属性 (Attributes)
- `config_class`

### 方法 (Methods)
- `__init__(self, config: MixtralConfig)`

---

## Class: `LlavaMptConfig`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_mpt`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `MptConfig`

### 属性 (Attributes)
- `model_type`

---

## Class: `LlavaMptForCausalLM`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_mpt`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `MptForCausalLM`, `LlavaMetaForCausalLM`

### 属性 (Attributes)
- `config_class`
- `generation_config`
- `lm_head`
- `supports_gradient_checkpointing`
- `transformer`

### 方法 (Methods)
- `__init__(self, config)`
- `_set_gradient_checkpointing(self, module, value)`
- `forward(self, input_ids: Optional[torch.LongTensor], past_key_values: Optional[Tuple[Tuple[torch.Tensor, torch.Tensor], ...]], attention_mask: Optional[torch.Tensor], inputs_embeds: Optional[torch.Tensor], labels: Optional[torch.Tensor], use_cache: Optional[bool], output_attentions: Optional[bool], output_hidden_states: Optional[bool], return_dict: Optional[bool], cache_position, images)`
- `get_model(self)`
- `prepare_inputs_for_generation(self, input_ids, past_key_values, inputs_embeds, **kwargs)`

---

## Class: `LlavaMptModel`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_mpt`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LlavaMetaModel`, `MptModel`

### 属性 (Attributes)
- `config_class`

### 方法 (Methods)
- `__init__(self, config: MptConfig)`
- `embed_tokens(self, x)`

---

## Class: `LlavaQwenConfig`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_qwen`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `Qwen2Config`

### 属性 (Attributes)
- `model_type`

---

## Class: `LlavaQwenForCausalLM`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_qwen`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `Qwen2ForCausalLM`, `LlavaMetaForCausalLM`

### 属性 (Attributes)
- `config_class`
- `lm_head`
- `model`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, input_ids: torch.LongTensor, attention_mask: Optional[torch.Tensor], position_ids: Optional[torch.LongTensor], past_key_values: Optional[List[torch.FloatTensor]], inputs_embeds: Optional[torch.FloatTensor], labels: Optional[torch.LongTensor], use_cache: Optional[bool], output_attentions: Optional[bool], output_hidden_states: Optional[bool], images: Optional[torch.FloatTensor], image_sizes: Optional[List[List[int]]], return_dict: Optional[bool], modalities: Optional[List[str]], dpo_forward: Optional[bool], cache_position) -> Union[Tuple, CausalLMOutputWithPast]`
- `generate(self, inputs: Optional[torch.Tensor], images: Optional[torch.Tensor], image_sizes: Optional[torch.Tensor], modalities: Optional[List[str]], **kwargs) -> Union[GenerateOutput, torch.LongTensor]`
- `get_model(self)`
- `prepare_inputs_for_generation(self, input_ids, past_key_values, inputs_embeds, **kwargs)`

---

## Class: `LlavaQwenModel`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_qwen`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LlavaMetaModel`, `Qwen2Model`

### 属性 (Attributes)
- `config_class`

### 方法 (Methods)
- `__init__(self, config: Qwen2Config)`

---

## Class: `LlavaQwenMoeConfig`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_qwen_moe`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `Qwen2MoeConfig`

### 属性 (Attributes)
- `model_type`

---

## Class: `LlavaQwenMoeForCausalLM`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_qwen_moe`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `Qwen2MoeForCausalLM`, `LlavaMetaForCausalLM`

### 属性 (Attributes)
- `config_class`
- `lm_head`
- `model`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, input_ids: torch.LongTensor, attention_mask: Optional[torch.Tensor], position_ids: Optional[torch.LongTensor], past_key_values: Optional[List[torch.FloatTensor]], inputs_embeds: Optional[torch.FloatTensor], labels: Optional[torch.LongTensor], use_cache: Optional[bool], output_attentions: Optional[bool], output_hidden_states: Optional[bool], images: Optional[torch.FloatTensor], image_sizes: Optional[List[List[int]]], return_dict: Optional[bool], modalities: Optional[List[str]], dpo_forward: Optional[bool], cache_position) -> Union[Tuple, CausalLMOutputWithPast]`
- `generate(self, inputs: Optional[torch.Tensor], images: Optional[torch.Tensor], image_sizes: Optional[torch.Tensor], modalities: Optional[List[str]], **kwargs) -> Union[GenerateOutput, torch.LongTensor]`
- `get_model(self)`
- `prepare_inputs_for_generation(self, input_ids, past_key_values, inputs_embeds, **kwargs)`

---

## Class: `LlavaQwenMoeModel`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `llava_qwen_moe`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `LlavaMetaModel`, `Qwen2MoeModel`

### 属性 (Attributes)
- `config_class`

### 方法 (Methods)
- `__init__(self, config: Qwen2MoeConfig)`

---

## Class: `MLCDEncoder`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `vit_rope2d_hf`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `config`
- `gradient_checkpointing`
- `layers`

### 方法 (Methods)
- `__init__(self, config: MLCDVisionConfig)`
- `forward(self, inputs_embeds, rotary_pos_emb, output_hidden_states: Optional[bool], return_dict: Optional[bool]) -> Union[Tuple, BaseModelOutput]`

---

## Class: `MLCDEncoderLayer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `vit_rope2d_hf`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `embed_dim`
- `layer_norm1`
- `layer_norm2`
- `mlp`
- `self_attn`

### 方法 (Methods)
- `__init__(self, config: MLCDVisionConfig)`
- `forward(self, hidden_states: torch.Tensor, rotary_pos_emb: torch.Tensor) -> Tuple[torch.FloatTensor]`

---

## Class: `MLCDMLP`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `vit_rope2d_hf`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `CLIPMLP`

### 方法 (Methods)
- `__init__(self, config: MLCDVisionConfig)`

---

## Class: `MLCDPreTrainedModel`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `vit_rope2d_hf`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `PreTrainedModel`

### 属性 (Attributes)
- `_supports_sdpa`
- `base_model_prefix`
- `config_class`
- `supports_gradient_checkpointing`

### 方法 (Methods)
- `_init_weights(self, module)`

---

## Class: `MLCDSdpaAttention`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `vit_rope2d_hf`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `torch.nn.Module`

### 属性 (Attributes)
- `config`
- `dropout`
- `embed_dim`
- `head_dim`
- `k_proj`
- `num_heads`
- `out_proj`
- `q_proj`
- `scale`
- `v_proj`

### 方法 (Methods)
- `__init__(self, config: MLCDVisionConfig)`
- `forward(self, hidden_states: torch.Tensor, rotary_pos_emb: torch.Tensor) -> Tuple[torch.Tensor, Optional[torch.Tensor]]`

---

## Class: `MLCDVisionConfig`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `vit_rope2d_hf`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `CLIPVisionConfig`

### 属性 (Attributes)
- `model_type`

### 方法 (Methods)
- `__init__(self, **kwargs)`

---

## Class: `MLCDVisionEmbeddings`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `vit_rope2d_hf`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `torch.nn.Module`

### 属性 (Attributes)
- `class_embedding`
- `config`
- `embed_dim`
- `image_size`
- `num_patches`
- `num_positions`
- `patch_embedding`
- `patch_size`

### 方法 (Methods)
- `__init__(self, config: MLCDVisionConfig)`
- `forward(self, pixel_values: torch.FloatTensor) -> torch.Tensor`

---

## Class: `MLCDVisionModel`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `vit_rope2d_hf`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `MLCDPreTrainedModel`

### 属性 (Attributes)
- `_no_split_modules`
- `config_class`
- `main_input_name`
- `vision_model`

### 方法 (Methods)
- `__init__(self, config: MLCDVisionConfig)`
- `forward(self, pixel_values: Optional[torch.FloatTensor], output_attentions: Optional[bool], output_hidden_states: Optional[bool], return_dict: Optional[bool]) -> Union[Tuple, BaseModelOutputWithPooling]`
- `get_input_embeddings(self) -> nn.Module`

---

## Class: `MLCDVisionTower`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `mlcd_encoder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `is_loaded`
- `select_feature`
- `select_layer`
- `vision_tower_name`

### 方法 (Methods)
- `__init__(self, vision_tower, args, delay_load)`
- `config(self)`
- `device(self)`
- `dtype(self)`
- `dummy_feature(self)`
- `feature_select(self, image_forward_outs)`
- `forward(self, images)`
- `hidden_size(self)`
- `image_size(self)`
- `load_model(self, device_map)`
- `num_patches(self)`
- `num_patches_per_side(self)`

---

## Class: `MLCDVisionTowerS2`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `mlcd_encoder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `MLCDVisionTower`

### 属性 (Attributes)
- `s2_image_size`
- `s2_scales`
- `s2_split_size`

### 方法 (Methods)
- `__init__(self, vision_tower, args, delay_load)`
- `forward(self, images)`
- `forward_feature(self, images)`
- `hidden_size(self)`
- `load_model(self, device_map)`

---

## Class: `MLCDVisionTransformer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `vit_rope2d_hf`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `class_pos_emb`
- `config`
- `embeddings`
- `encoder`
- `post_layernorm`
- `pre_layrnorm`
- `vision_rotary_embedding`

### 方法 (Methods)
- `__init__(self, config: MLCDVisionConfig)`
- `forward(self, pixel_values: Optional[torch.FloatTensor], output_hidden_states: Optional[bool], return_dict: Optional[bool]) -> Union[Tuple, BaseModelOutputWithPooling]`
- `rot_pos_emb(self, grid_thw)`

---

## Class: `MaskedDrop`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `masked_drop`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `mode`
- `ratio`
- `ratio_lower`
- `ratio_upper`
- `skip_percentage`

### 方法 (Methods)
- `__init__(self, model_args)`
- `config(self)`
- `forward(self, image_features, *args, **kwargs)`
- `random_masking(self, x, len_keep)`

---

## Class: `MaxPooler`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `hf_model`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 方法 (Methods)
- `forward(self, x: BaseModelOutput, attention_mask: TensorType)`

---

## Class: `MeanPooler`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `hf_model`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 方法 (Methods)
- `forward(self, x: BaseModelOutput, attention_mask: TensorType)`

---

## Class: `Mlp`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `eva_vit_model`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`, `nn.Module`

### 属性 (Attributes)
- `act`
- `drop`
- `fc1`
- `fc2`
- `ffn_ln`

### 方法 (Methods)
- `__init__(self, in_features, hidden_features, out_features, act_layer, norm_layer, drop, subln)`
- `forward(self, x)`

---

## Class: `ModelArguments`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `train`

### 属性 (Attributes)
- `add_faster_video: Optional[bool]`
- `delay_load: Optional[bool]`
- `faster_token_stride: Optional[int]`
- `freeze_backbone: bool`
- `mm_mask_drop_mode: str`
- `mm_mask_drop_ratio: float`
- `mm_mask_drop_ratio_lower: Optional[float]`
- `mm_mask_drop_ratio_upper: Optional[float]`
- `mm_mask_drop_skip_percentage: float`
- `mm_newline_position: Optional[str]`
- `mm_patch_merge_type: Optional[str]`
- `mm_perceiver_depth: Optional[int]`
- `mm_perceiver_ff_mult: Optional[float]`
- `mm_perceiver_latents: Optional[int]`
- `mm_perceiver_pretrained: Optional[str]`
- `mm_projector_type: Optional[str]`
- `mm_qformer_depth: Optional[int]`
- `mm_qformer_latents: Optional[int]`
- `mm_qformer_pretrained: Optional[str]`
- `mm_resampler_type: Optional[str]`
- `mm_spatial_pool_mode: str`
- `mm_spatial_pool_out_channels: Optional[int]`
- `mm_spatial_pool_stride: Optional[int]`
- `mm_tunable_parts: Optional[str]`
- `mm_use_im_patch_token: bool`
- `mm_use_im_start_end: bool`
- `mm_vision_select_feature: Optional[str]`
- `mm_vision_select_layer: Optional[int]`
- `model_class_name: Optional[str]`
- `model_name_or_path: Optional[str]`
- `pos_skipping_range: Optional[int]`
- `pretrain_mm_mlp_adapter: Optional[str]`
- `rope_scaling_factor: Optional[float]`
- `rope_scaling_type: Optional[str]`
- `s2: Optional[bool]`
- `s2_scales: Optional[str]`
- `tune_mm_mlp_adapter: bool`
- `tune_mm_vision_resampler: bool`
- `unfreeze_language_model: bool`
- `unfreeze_mm_vision_tower: bool`
- `use_pos_skipping: Optional[bool]`
- `version: Optional[str]`
- `vision_tower: Optional[str]`
- `vision_tower_pretrained: Optional[str]`

---

## Class: `ModelConfig`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `model_config`

### 属性 (Attributes)
- `attn_implementation: Optional[str]`
- `bnb_4bit_quant_type: Optional[str]`
- `load_in_4bit: bool`
- `load_in_8bit: bool`
- `lora_alpha: Optional[int]`
- `lora_dropout: Optional[float]`
- `lora_modules_to_save: Optional[List[str]]`
- `lora_r: Optional[int]`
- `lora_target_modules: Optional[List[str]]`
- `model_name_or_path: Optional[str]`
- `model_revision: str`
- `torch_dtype: Optional[str]`
- `trust_remote_code: bool`
- `use_bnb_nested_quant: bool`
- `use_peft: bool`

### 方法 (Methods)
- `__post_init__(self)`
- `to_dict(self)`

---

## Class: `ModelWorker`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `model_worker`

### 属性 (Attributes)
- `controller_addr`
- `is_multimodal`
- `worker_addr`
- `worker_id`

### 方法 (Methods)
- `__init__(self, controller_addr, worker_addr, sgl_endpoint, worker_id, no_register, model_name)`
- `__init__(self, controller_addr, worker_addr, worker_id, no_register, model_path, model_base, model_name, load_8bit, load_4bit)`
- `generate_stream(self, params)`
- `generate_stream_gate(self, params)`
- `get_queue_length(self)`
- `get_status(self)`
- `register_to_controller(self)`
- `send_heart_beat(self)`

---

## Class: `ModifiedResNet`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modified_resnet`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `_inplanes`
- `act1`
- `act2`
- `act3`
- `attnpool`
- `avgpool`
- `bn1`
- `bn2`
- `bn3`
- `conv1`
- `conv2`
- `conv3`
- `image_size`
- `layer1`
- `layer2`
- `layer3`
- `layer4`
- `output_dim`

### 方法 (Methods)
- `__init__(self, layers, output_dim, heads, image_size, width)`
- `_make_layer(self, planes, blocks, stride)`
- `forward(self, x)`
- `init_parameters(self)`
- `lock(self, unlocked_groups, freeze_bn_stats)`
- `set_grad_checkpointing(self, enable)`
- `stem(self, x)`

---

## Class: `OpenCLIPVisionTower`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `open_clip_encoder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `is_loaded`
- `model_name`
- `pretrained`
- `select_feature`
- `select_layer`

### 方法 (Methods)
- `__init__(self, vision_tower, args, delay_load)`
- `config(self)`
- `device(self)`
- `dtype(self)`
- `dummy_feature(self)`
- `feature_select(self, image_forward_outs)`
- `forward(self, images)`
- `forward_visual(self, x, output_hidden_states)`
- `hidden_size(self)`
- `image_size(self)`
- `load_model(self, device_map)`
- `num_patches(self)`
- `num_patches_per_side(self)`

---

## Class: `PPOConfig`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `ppo_config`

### 属性 (Attributes)
- `accelerator_kwargs: JSONDict`
- `adap_kl_ctrl: bool`
- `backward_batch_size: tyro.conf.Suppress[int]`
- `batch_size: int`
- `cliprange: float`
- `cliprange_value: float`
- `compare_steps: int`
- `early_stopping: bool`
- `exp_name: str`
- `forward_batch_size: Optional[int]`
- `gamma: float`
- `global_backward_batch_size: tyro.conf.Suppress[int]`
- `global_batch_size: tyro.conf.Suppress[int]`
- `gradient_accumulation_steps: int`
- `horizon: Optional[float]`
- `init_kl_coef: Optional[float]`
- `is_encoder_decoder: Optional[tyro.conf.Suppress[bool]]`
- `is_peft_model: Optional[tyro.conf.Suppress[bool]]`
- `kl_penalty: Literal['kl', 'abs', 'mse', 'full']`
- `lam: float`
- `learning_rate: float`
- `log_with: Optional[Literal['wandb', 'tensorboard']]`
- `max_grad_norm: Optional[float]`
- `mini_batch_size: int`
- `model_name: Optional[str]`
- `optimize_cuda_cache: Optional[bool]`
- `optimize_device_cache: Optional[bool]`
- `ppo_epochs: int`
- `project_kwargs: JSONDict`
- `push_to_hub_if_best_kwargs: JSONDict`
- `query_dataset: Optional[str]`
- `ratio_threshold: float`
- `remove_unused_columns: bool`
- `reward_model: Optional[str]`
- `score_clip: Optional[float]`
- `seed: int`
- `steps: int`
- `target: Optional[float]`
- `target_kl: float`
- `task_name: Optional[str]`
- `tracker_kwargs: JSONDict`
- `tracker_project_name: str`
- `use_score_norm: bool`
- `use_score_scaling: bool`
- `vf_coef: float`
- `whiten_rewards: bool`
- `world_size: tyro.conf.Suppress[int]`

### 方法 (Methods)
- `__post_init__(self)`
- `to_dict(self)`

---

## Class: `PPODecorators`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `core`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `object`

### 属性 (Attributes)
- `optimize_device_cache`

### 方法 (Methods)
- `empty_device_cache(cls)`

---

## Class: `PPOTrainer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `ppo_trainer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `BaseTrainer`

### 属性 (Attributes)
- `_signature_columns`
- `_tag_names`
- `accelerator`
- `current_step`
- `data_collator`
- `dataset`
- `is_distributed`
- `is_encoder_decoder`
- `is_peft_model`
- `is_using_text_environment`
- `lr_scheduler`
- `model`
- `model_params`
- `optional_peft_ctx`
- `running`
- `tokenizer`

### 方法 (Methods)
- `__init__(self, config: PPOConfig, model: PreTrainedModelWrapper, ref_model: Optional[PreTrainedModelWrapper], tokenizer: PreTrainedTokenizerBase, dataset: Optional[Union[torch.utils.data.Dataset, Dataset]], optimizer: Optional[torch.optim.Optimizer], data_collator: Optional[typing.Callable], num_shared_layers: Optional[int], lr_scheduler: Optional[torch.optim.lr_scheduler._LRScheduler])`
- `_early_stop(self, policykl)`
- `_filter_kwargs(self, kwargs, target_func)`
- `_generate_batched(self, model: PreTrainedModelWrapper, query_tensors: List[torch.Tensor], length_sampler: Callable, batch_size: int, return_prompt: bool, pad_to_multiple_of: int, remove_padding: bool, **generation_kwargs)`
- `_kl_penalty(self, logprob: torch.FloatTensor, ref_logprob: torch.FloatTensor) -> torch.FloatTensor`
- `_prepare_deepspeed(self, model: PreTrainedModelWrapper)`
- `_remove_unused_columns(self, dataset: 'Dataset')`
- `_save_pretrained(self, save_directory: str) -> None`
- `_set_signature_columns_if_needed(self)`
- `_show_tokens(self, tokens, masks)`
- `_step_safety_checker(self, batch_size: int, queries: List[torch.LongTensor], responses: List[torch.LongTensor], scores: List[torch.FloatTensor], masks: Optional[List[torch.LongTensor]])`
- `batched_forward_pass(self, model: PreTrainedModelWrapper, queries: torch.Tensor, responses: torch.Tensor, model_inputs: dict, return_logits: bool, response_masks: Optional[torch.Tensor])`
- `compute_advantages(self, values: torch.FloatTensor, rewards: torch.FloatTensor, mask: torch.FloatTensor)`
- `compute_rewards(self, scores: torch.FloatTensor, logprobs: torch.FloatTensor, ref_logprobs: torch.FloatTensor, masks: torch.LongTensor)`
- `create_model_card(self, path: str, model_name: Optional[str]) -> None`
- `gather_stats(self, stats)`
- `generate(self, query_tensor: Union[torch.Tensor, List[torch.Tensor]], length_sampler: Callable, batch_size: int, return_prompt: bool, generate_ref_response: bool, **generation_kwargs)`
- `log_stats(self, stats: dict, batch: dict, rewards: List[torch.FloatTensor], columns_to_log: List[str])`
- `loss(self, old_logprobs: torch.FloatTensor, values: torch.FloatTensor, logits: torch.FloatTensor, vpreds: torch.FloatTensor, logprobs: torch.FloatTensor, mask: torch.LongTensor, advantages: torch.FloatTensor, returns: torch.FloatTensor)`
- `prepare_dataloader(self, dataset: Union[torch.utils.data.Dataset, Dataset], data_collator)`
- `prepare_model_inputs(self, queries: torch.Tensor, responses: torch.Tensor)`
- `record_step_stats(self, kl_coef: float, **data)`
- `step(self, queries: List[torch.LongTensor], responses: List[torch.LongTensor], scores: List[torch.FloatTensor], response_masks: Optional[List[torch.LongTensor]])`
- `train_minibatch(self, old_logprobs: torch.FloatTensor, values: torch.FloatTensor, logprobs: torch.FloatTensor, logits: torch.FloatTensor, vpreds: torch.FloatTensor, mask: torch.LongTensor, advantages: torch.FloatTensor, returns: torch.FloatTensor)`

---

## Class: `PatchDropout`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `transformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`, `nn.Module`

### 属性 (Attributes)
- `exclude_first_token`
- `prob`

### 方法 (Methods)
- `__init__(self, prob, exclude_first_token)`
- `forward(self, x)`

---

## Class: `PatchEmbed`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `eva_vit_model`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`, `nn.Module`

### 属性 (Attributes)
- `img_size`
- `num_patches`
- `patch_shape`
- `patch_size`
- `proj`

### 方法 (Methods)
- `__init__(self, img_size, patch_size, in_chans, embed_dim)`
- `forward(self, x, **kwargs)`

---

## Class: `PerPromptStatTracker`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `utils`

### 属性 (Attributes)
- `buffer_size`
- `min_count`
- `stats`

### 方法 (Methods)
- `__init__(self, buffer_size, min_count)`
- `get_stats(self)`
- `update(self, prompts, rewards)`

---

## Class: `PerceiverAttention`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `perceiver`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `heads`
- `norm_latents`
- `norm_media`
- `scale`
- `to_kv`
- `to_out`
- `to_q`

### 方法 (Methods)
- `__init__(self)`
- `forward(self, x, latents)`

---

## Class: `PerceiverResampler`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `perceiver`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `depth`
- `ff_mult`
- `num_latents`
- `perceiver`
- `pretrained`

### 方法 (Methods)
- `__init__(self, model_args, vision_tower)`
- `config(self)`
- `forward(self, image_features, *args, **kwargs)`

---

## Class: `PerceiverResamplerModule`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `perceiver`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `frame_embs`
- `latents`
- `layers`
- `media_time_embs`
- `norm`

### 方法 (Methods)
- `__init__(self)`
- `forward(self, x)`

---

## Class: `PoolerProjector`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `pooler_projector`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `_config`
- `conv_pool`
- `hw`
- `proj`

### 方法 (Methods)
- `__init__(self, config, vision_cfg)`
- `config(self)`
- `forward(self, x, *args, **kwargs)`

---

## Class: `PreTrainedModelWrapper`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_base`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `config`
- `is_loaded_in_4bit`
- `is_loaded_in_8bit`
- `is_sequential_parallel`
- `policy_adapter_name`
- `prepare_inputs_for_generation`
- `pretrained_model`
- `rm_adapter_name`
- `supported_args`
- `supported_modules`
- `supported_pretrained_model_architectures`
- `supported_rm_modules`
- `supports_rm_adapter`
- `transformers_parent_class`

### 方法 (Methods)
- `__init__(self, pretrained_model, score_module, supports_rm_adapter, rm_adapter_name, **kwargs)`
- `_get_checkpoint_from_hub(cls, pretrained_model, pretrained_model_name_or_path, index_filename, token, model_name, model_index_name)`
- `_get_current_device(cls)`
- `_split_kwargs(cls, kwargs)`
- `add_and_load_reward_modeling_adapter(cls, pretrained_model, adapter_model_id, adapter_name, token)`
- `compute_reward_score(self, input_ids, attention_mask, **kwargs)`
- `from_pretrained(cls, pretrained_model_name_or_path, *model_args, **kwargs)`
- `post_init(self, *args, **kwargs)`
- `push_to_hub(self, *args, **kwargs)`
- `save_pretrained(self, *args, **kwargs)`
- `state_dict(self, *args, **kwargs)`

---

## Class: `Predictor`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `predict`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `BasePredictor`

### 方法 (Methods)
- `predict(self, image: Path, prompt: str, top_p: float, temperature: float, max_tokens: int) -> ConcatenateIterator[str]`
- `setup(self) -> None`

---

## Class: `PretrainedConfig`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `hf_model`

---

## Class: `Qformer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `qformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `depth`
- `num_latents`
- `pretrained`

### 方法 (Methods)
- `__init__(self, model_args, vision_tower)`
- `build_Qformer(self, vision_width, cross_attention_freq, num_query_token)`
- `config(self)`
- `forward(self, image_features, *args, **kwargs)`
- `hidden_size(self)`

---

## Class: `QuickGELU`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `transformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 方法 (Methods)
- `forward(self, x: torch.Tensor)`

---

## Class: `RMSnorm`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `model`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `variance_epsilon`
- `weight`

### 方法 (Methods)
- `__init__(self, hidden_size, eps)`
- `forward(self, hidden_states)`

---

## Class: `RelativePositionBias`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `eva_vit_model`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`, `nn.Module`

### 属性 (Attributes)
- `num_relative_distance`
- `relative_position_bias_table`
- `window_size`

### 方法 (Methods)
- `__init__(self, window_size, num_heads)`
- `forward(self)`

---

## Class: `ResidualAttentionBlock`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `transformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `ln_1`
- `ln_2`
- `ls_1`
- `ls_2`
- `mlp`
- `xattn`

### 方法 (Methods)
- `__init__(self, d_model: int, n_head: int, mlp_ratio: float, ls_init_value: float, act_layer: Callable, norm_layer: Callable, xattn: bool)`
- `attention(self, x: torch.Tensor, attn_mask: Optional[torch.Tensor])`
- `forward(self, x: torch.Tensor, attn_mask: Optional[torch.Tensor])`

---

## Class: `ResizeMaxSize`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `transform`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `fill`
- `fn`
- `interpolation`
- `max_size`

### 方法 (Methods)
- `__init__(self, max_size, interpolation, fn, fill)`
- `forward(self, img)`

---

## Class: `RewardConfig`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `reward_config`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `TrainingArguments`

### 属性 (Attributes)
- `max_length: Optional[int]`

---

## Class: `RewardDataCollatorWithPadding`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `utils`

### 属性 (Attributes)
- `max_length: Optional[int]`
- `pad_to_multiple_of: Optional[int]`
- `padding: Union[bool, str]`
- `return_tensors: str`
- `tokenizer: PreTrainedTokenizerBase`

### 方法 (Methods)
- `__call__(self, features: List[Dict[str, Any]]) -> Dict[str, Any]`

---

## Class: `RewardTrainer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `reward_trainer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `Trainer`

### 方法 (Methods)
- `__init__(self, model: Union[PreTrainedModel, nn.Module], args: Optional[RewardConfig], data_collator: Optional[DataCollator], train_dataset: Optional[Dataset], eval_dataset: Optional[Union[Dataset, Dict[str, Dataset]]], tokenizer: Optional[PreTrainedTokenizerBase], model_init: Optional[Callable[[], PreTrainedModel]], compute_metrics: Optional[Callable[[EvalPrediction], Dict]], callbacks: Optional[List[TrainerCallback]], optimizers: Tuple[torch.optim.Optimizer, torch.optim.lr_scheduler.LambdaLR], preprocess_logits_for_metrics: Optional[Callable[[torch.Tensor, torch.Tensor], torch.Tensor]], max_length: Optional[int], peft_config: Optional[Dict])`
- `compute_loss(self, model: Union[PreTrainedModel, nn.Module], inputs: Dict[str, Union[torch.Tensor, Any]], return_outputs) -> Union[torch.Tensor, Tuple[torch.Tensor, Dict[str, torch.Tensor]]]`
- `prediction_step(self, model: Union[PreTrainedModel, nn.Module], inputs: Dict[str, Union[torch.Tensor, Any]], prediction_loss_only: bool, ignore_keys: Optional[List[str]]) -> Tuple[Optional[torch.Tensor], Optional[torch.Tensor], Optional[torch.Tensor]]`

---

## Class: `RunningMoments`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `utils`

### 属性 (Attributes)
- `accelerator`
- `count`
- `mean`
- `std`
- `var`

### 方法 (Methods)
- `__init__(self, accelerator)`
- `update(self, xs: torch.Tensor) -> Tuple[float, float]`

---

## Class: `SFTTrainer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `sft_trainer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `Trainer`

### 属性 (Attributes)
- `_tag_names`
- `_trainer_supports_neftune`
- `dataset_batch_size`
- `dataset_num_proc`

### 方法 (Methods)
- `__init__(self, model: Union[PreTrainedModel, nn.Module, str], args: TrainingArguments, data_collator: Optional[DataCollator], train_dataset: Optional[Dataset], eval_dataset: Optional[Union[Dataset, Dict[str, Dataset]]], tokenizer: Optional[PreTrainedTokenizerBase], model_init: Optional[Callable[[], PreTrainedModel]], compute_metrics: Optional[Callable[[EvalPrediction], Dict]], callbacks: Optional[List[TrainerCallback]], optimizers: Tuple[torch.optim.Optimizer, torch.optim.lr_scheduler.LambdaLR], preprocess_logits_for_metrics: Optional[Callable[[torch.Tensor, torch.Tensor], torch.Tensor]], peft_config: Optional['PeftConfig'], dataset_text_field: Optional[str], packing: Optional[bool], formatting_func: Optional[Callable], max_seq_length: Optional[int], infinite: Optional[bool], num_of_sequences: Optional[int], chars_per_token: Optional[float], dataset_num_proc: Optional[int], dataset_batch_size: int, neftune_noise_alpha: Optional[float], model_init_kwargs: Optional[Dict], dataset_kwargs: Optional[Dict])`
- `_prepare_dataset(self, dataset, tokenizer, packing, dataset_text_field, max_seq_length, formatting_func, num_of_sequences, chars_per_token, remove_unused_columns, append_concat_token, add_special_tokens)`
- `_prepare_non_packed_dataloader(self, tokenizer, dataset, dataset_text_field, max_seq_length, formatting_func, add_special_tokens, remove_unused_columns)`
- `_prepare_packed_dataloader(self, tokenizer, dataset, dataset_text_field, max_seq_length, num_of_sequences, chars_per_token, formatting_func, append_concat_token, add_special_tokens)`
- `_trl_activate_neftune(self, model)`
- `push_to_hub(self, commit_message: Optional[str], blocking: bool, **kwargs) -> str`
- `train(self, *args, **kwargs)`

---

## Class: `SeparatorStyle`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `conversation`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `Enum`

### 属性 (Attributes)
- `CHATML`
- `GEMMA`
- `LLAMA_2`
- `LLAMA_3`
- `MPT`
- `PLAIN`
- `QWEN`
- `SINGLE`
- `TWO`

---

## Class: `SigLipAttention`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `siglip_encoder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `config`
- `dropout`
- `embed_dim`
- `head_dim`
- `k_proj`
- `num_heads`
- `out_proj`
- `q_proj`
- `scale`
- `v_proj`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, hidden_states: torch.Tensor, attention_mask: Optional[torch.Tensor], output_attentions: Optional[bool]) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]`

---

## Class: `SigLipEncoder`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `siglip_encoder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `config`
- `gradient_checkpointing`
- `layers`

### 方法 (Methods)
- `__init__(self, config: SigLipVisionConfig)`
- `forward(self, inputs_embeds, attention_mask: Optional[torch.Tensor], output_attentions: Optional[bool], output_hidden_states: Optional[bool], return_dict: Optional[bool]) -> Union[Tuple, BaseModelOutput]`

---

## Class: `SigLipEncoderLayer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `siglip_encoder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `embed_dim`
- `layer_norm1`
- `layer_norm2`
- `mlp`
- `self_attn`

### 方法 (Methods)
- `__init__(self, config: SigLipVisionConfig)`
- `forward(self, hidden_states: torch.Tensor, attention_mask: torch.Tensor, output_attentions: Optional[bool]) -> Tuple[torch.FloatTensor]`

---

## Class: `SigLipImageProcessor`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `siglip_encoder`

### 属性 (Attributes)
- `crop_size`
- `data_format`
- `image_mean`
- `image_std`
- `resample`
- `rescale_factor`
- `size`

### 方法 (Methods)
- `__init__(self, image_mean, image_std, size, crop_size: Dict[str, int], resample, rescale_factor, data_format)`
- `preprocess(self, images, return_tensors)`

---

## Class: `SigLipMLP`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `siglip_encoder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `activation_fn`
- `config`
- `fc1`
- `fc2`

### 方法 (Methods)
- `__init__(self, config)`
- `forward(self, hidden_states: torch.Tensor) -> torch.Tensor`

---

## Class: `SigLipMultiheadAttentionPoolingHead`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `siglip_encoder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `attention`
- `layernorm`
- `mlp`
- `probe`

### 方法 (Methods)
- `__init__(self, config: SigLipVisionConfig)`
- `forward(self, hidden_state)`

---

## Class: `SigLipPreTrainedModel`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `siglip_encoder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `PreTrainedModel`

### 属性 (Attributes)
- `base_model_prefix`
- `config_class`
- `supports_gradient_checkpointing`

### 方法 (Methods)
- `_init_weights(self, module)`

---

## Class: `SigLipVisionConfig`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `siglip_encoder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `PretrainedConfig`

### 属性 (Attributes)
- `attention_dropout`
- `hidden_act`
- `hidden_size`
- `image_mean`
- `image_size`
- `intermediate_size`
- `layer_norm_eps`
- `model_type`
- `num_attention_heads`
- `num_channels`
- `num_hidden_layers`
- `patch_size`

### 方法 (Methods)
- `__init__(self, hidden_size, image_mean, intermediate_size, num_hidden_layers, num_attention_heads, num_channels, image_size, patch_size, hidden_act, layer_norm_eps, attention_dropout, **kwargs)`
- `from_pretrained(cls, pretrained_model_name_or_path: Union[str, os.PathLike], **kwargs) -> 'PretrainedConfig'`

---

## Class: `SigLipVisionEmbeddings`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `siglip_encoder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `config`
- `embed_dim`
- `image_size`
- `num_patches`
- `num_positions`
- `patch_embedding`
- `patch_size`
- `position_embedding`

### 方法 (Methods)
- `__init__(self, config: SigLipVisionConfig)`
- `forward(self, pixel_values: torch.FloatTensor) -> torch.Tensor`

---

## Class: `SigLipVisionModel`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `siglip_encoder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `SigLipPreTrainedModel`

### 属性 (Attributes)
- `_no_split_modules`
- `config_class`
- `main_input_name`
- `vision_model`

### 方法 (Methods)
- `__init__(self, config: SigLipVisionConfig)`
- `forward(self, pixel_values, output_attentions: Optional[bool], output_hidden_states: Optional[bool], return_dict: Optional[bool]) -> Union[Tuple, BaseModelOutputWithPooling]`
- `get_input_embeddings(self) -> nn.Module`

---

## Class: `SigLipVisionModelOutput`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `siglip_encoder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `ModelOutput`

### 属性 (Attributes)
- `attentions: Optional[Tuple[torch.FloatTensor]]`
- `hidden_states: Optional[Tuple[torch.FloatTensor]]`
- `image_embeds: Optional[torch.FloatTensor]`
- `last_hidden_state: torch.FloatTensor`

---

## Class: `SigLipVisionTower`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `siglip_encoder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `config`
- `image_processor`
- `is_loaded`
- `vision_tower_name`

### 方法 (Methods)
- `__init__(self, vision_tower, vision_tower_cfg, delay_load)`
- `device(self)`
- `dtype(self)`
- `dummy_feature(self)`
- `forward(self, images)`
- `hidden_size(self)`
- `image_size(self)`
- `load_model(self, device_map)`
- `num_patches(self)`
- `num_patches_per_side(self)`

---

## Class: `SigLipVisionTransformer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `siglip_encoder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `config`
- `embeddings`
- `encoder`
- `head`
- `post_layernorm`

### 方法 (Methods)
- `__init__(self, config: SigLipVisionConfig)`
- `forward(self, pixel_values, output_attentions: Optional[bool], output_hidden_states: Optional[bool], return_dict: Optional[bool]) -> Union[Tuple, BaseModelOutputWithPooling]`

---

## Class: `SimpleResBlock`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `builder`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `pre_norm`
- `proj`

### 方法 (Methods)
- `__init__(self, channels)`
- `forward(self, x)`

---

## Class: `SimpleTokenizer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `tokenizer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `object`

### 属性 (Attributes)
- `all_special_ids`
- `bpe_ranks`
- `byte_decoder`
- `byte_encoder`
- `cache`
- `decoder`
- `encoder`
- `pat`
- `vocab_size`

### 方法 (Methods)
- `__init__(self, bpe_path: str, special_tokens)`
- `bpe(self, token)`
- `decode(self, tokens)`
- `encode(self, text)`

---

## Class: `SpatialPool`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `spatial_pool`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `mode`
- `out_channels`
- `stride`

### 方法 (Methods)
- `__init__(self, model_args, vision_tower)`
- `config(self)`
- `forward(self, image_features, images, *args, **kwargs)`
- `hidden_size(self)`

---

## Class: `StreamToLogger`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `utils`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `object`

### 属性 (Attributes)
- `linebuf`
- `log_level`
- `logger`
- `terminal`

### 方法 (Methods)
- `__getattr__(self, attr)`
- `__init__(self, logger, log_level)`
- `flush(self)`
- `write(self, buf)`

---

## Class: `StringStoppingCriteria`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `base_environment`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `StoppingCriteria`

### 属性 (Attributes)
- `first_call`
- `stop_strings`
- `tokenizer`

### 方法 (Methods)
- `__call__(self, input_ids, scores, **kwargs)`
- `__init__(self, stop_strings, tokenizer)`

---

## Class: `SwiGLU`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `eva_vit_model`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`, `nn.Module`

### 属性 (Attributes)
- `act`
- `drop`
- `ffn_ln`
- `w1`
- `w2`
- `w3`

### 方法 (Methods)
- `__init__(self, in_features, hidden_features, out_features, act_layer, drop, norm_layer, subln)`
- `forward(self, x)`

---

## Class: `TextEnvironment`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `base_environment`

### 属性 (Attributes)
- `call_token`
- `current_device`
- `is_encoder_decoder`
- `max_length`
- `max_tool_response`
- `max_turns`
- `model`
- `prompt`
- `request_token`
- `response_token`
- `reward_fn`
- `submit_token`
- `tokenizer`

### 方法 (Methods)
- `__init__(self, model, tokenizer, tools, reward_fn, prompt, max_turns, max_tool_reponse, max_length, generation_kwargs)`
- `_generate_batched(self, query_tensors, batch_size: int, pad_to_multiple_of: int)`
- `compute_reward(self, histories, **reward_kwargs)`
- `generate(self, histories)`
- `parse_tool_call(self, text)`
- `run(self, queries, **rewards_kwargs)`
- `step(self, history)`
- `task_end_check(self, history, model_turn)`
- `tasks_end_check(self, histories, model_turn)`

---

## Class: `TextHistory`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `base_environment`

### 属性 (Attributes)
- `completed`
- `model_color`
- `prompt_color`
- `reward`
- `reward_color`
- `system_color`
- `system_spans`
- `text`
- `text_spans`
- `token_masks`
- `token_spans`
- `tokens`
- `truncated`

### 方法 (Methods)
- `__init__(self, text, tokens, system)`
- `append_segment(self, text, tokens, system)`
- `complete(self, truncated)`
- `last_text_segment(self)`
- `show_colour_legend(self)`
- `show_text(self, show_legend)`
- `show_tokens(self, tokenizer, show_legend)`
- `split_query_response_tokens(self)`

---

## Class: `TextTransformer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `transformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `context_length`
- `ln_final`
- `output_dim`
- `positional_embedding`
- `text_projection`
- `token_embedding`
- `transformer`
- `vocab_size`
- `width`
- `xattn`

### 方法 (Methods)
- `__init__(self, context_length: int, vocab_size: int, width: int, heads: int, layers: int, ls_init_value: float, output_dim: int, act_layer: Callable, norm_layer: Callable, xattn: bool, attn_mask: bool)`
- `build_attention_mask(self)`
- `forward(self, text, return_all_features: bool)`
- `get_num_layers(self)`
- `init_parameters(self)`
- `no_weight_decay(self)`
- `set_grad_checkpointing(self, enable)`

---

## Class: `TimmModel`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `timm_model`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `head`
- `image_size`
- `trunk`

### 方法 (Methods)
- `__init__(self, model_name, embed_dim, image_size, pool, proj, proj_bias, drop, pretrained)`
- `forward(self, x)`
- `lock(self, unlocked_groups, freeze_bn_stats)`
- `set_grad_checkpointing(self, enable)`

---

## Class: `TrainingArguments`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `train`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `transformers.TrainingArguments`, `transformers.TrainingArguments`

### 属性 (Attributes)
- `attn_implementation: str`
- `auto_find_batch_size: bool`
- `beta: float`
- `bits: int`
- `cache_dir: Optional[str]`
- `double_quant: bool`
- `dpo_alpha: float`
- `freeze_mm_mlp_adapter: bool`
- `freeze_mm_vision_resampler: bool`
- `gamma: float`
- `generate_during_eval: bool`
- `gradient_checkpointing: bool`
- `group_by_modality_length: bool`
- `group_by_modality_length_auto: bool`
- `group_by_varlen: bool`
- `lora_alpha: int`
- `lora_bias: str`
- `lora_dropout: float`
- `lora_enable: bool`
- `lora_r: int`
- `lora_weight_path: str`
- `mm_projector_lr: Optional[float]`
- `mm_vision_tower_lr: Optional[float]`
- `model_max_length: int`
- `mpt_attn_impl: Optional[str]`
- `optim: str`
- `precompute_ref_log_probs: bool`
- `quant_type: str`
- `remove_unused_columns: bool`
- `verbose_logging: bool`

---

## Class: `Transformer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `transformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `grad_checkpointing`
- `layers`
- `resblocks`
- `width`

### 方法 (Methods)
- `__init__(self, width: int, layers: int, heads: int, mlp_ratio: float, ls_init_value: float, act_layer: Callable, norm_layer: Callable, xattn: bool)`
- `forward(self, x: torch.Tensor, attn_mask: Optional[torch.Tensor])`
- `get_cast_dtype(self) -> torch.dtype`

---

## Class: `ValueHead`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `modeling_value_head`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `dropout`
- `flatten`
- `summary`

### 方法 (Methods)
- `__init__(self, config, **kwargs)`
- `forward(self, hidden_states)`

---

## Class: `VisionRotaryEmbedding`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `rope`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`, `nn.Module`

### 方法 (Methods)
- `__init__(self, dim, pt_seq_len, ft_seq_len, custom_freqs, freqs_for, theta, max_freq, num_freqs)`
- `__init__(self, dim: int, theta: float) -> None`
- `forward(self, seqlen: int) -> torch.Tensor`
- `forward(self, t, start_index)`

---

## Class: `VisionRotaryEmbeddingFast`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `rope`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`, `nn.Module`

### 属性 (Attributes)
- `patch_dropout`

### 方法 (Methods)
- `__init__(self, dim, pt_seq_len, ft_seq_len, custom_freqs, freqs_for, theta, max_freq, num_freqs, patch_dropout)`
- `forward(self, t, patch_indices_keep)`

---

## Class: `VisionTransformer`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `transformer`

### 继承关系 (Inheritance)
- 继承自 (Inherits from): `nn.Module`

### 属性 (Attributes)
- `class_embedding`
- `conv1`
- `global_average_pool`
- `grid_size`
- `image_size`
- `ln_post`
- `ln_pre`
- `output_dim`
- `patch_dropout`
- `patch_size`
- `positional_embedding`
- `proj`
- `transformer`

### 方法 (Methods)
- `__init__(self, image_size: int, patch_size: int, width: int, layers: int, heads: int, mlp_ratio: float, ls_init_value: float, patch_dropout: float, global_average_pool: bool, output_dim: int, act_layer: Callable, norm_layer: Callable, xattn: bool)`
- `forward(self, x: torch.Tensor, return_all_features: bool)`
- `get_num_layers(self)`
- `lock(self, unlocked_groups, freeze_bn_stats)`
- `no_weight_decay(self)`
- `set_grad_checkpointing(self, enable)`

---

## Class: `WorkerInfo`

- **语言 (Language):** python
- **模块/文件 (Module/File):** `controller`

### 属性 (Attributes)
- `check_heart_beat: bool`
- `last_heart_beat: str`
- `model_names: List[str]`
- `queue_length: int`
- `speed: int`

---


[信息] UML 图表 'llava_uml.png' 也已通过 WebSocket 直接发送。
2025-06-08 16:58:28.295 | INFO     | agents.umlagent:update_plan_status:153 - Marked step 3 as completed in plan plan_1749373062
2025-06-08 16:58:28.295 | INFO     | agents.base:run:133 - Executing step 5/20
2025-06-08 16:58:50.077 | INFO     | agents.tool_call:think:56 - 🚨 uml agnet 没有选择任何工具或代理来执行任务
2025-06-08 16:58:50.077 | INFO     | agents.base:run:133 - Executing step 6/20
2025-06-08 16:58:50.077 | WARNING  | agents.umlagent:_get_current_step_index:201 - Error finding current step index: 
2025-06-08 16:59:17.828 | INFO     | agents.tool_call:think:64 - ✨ uml agnet 的想法为: Using tools response: 我已经生成了LLava项目的UML类图。现在，我将执行最后一步骤：分析UML图并提供总结。

根据生成的UML图，我们可以看到LLava项目包含许多类和模块，主要用于处理多模态数据（如文本和图像）以及训练和评估模型。以下是一些关键点：

1. 项目中有很多继承关系，例如 `LlavaMetaForCausalLM` 继承自 `PreTrainedModelWrapper` 和其他特定的模型类。这种设计有助于代码复用和扩展。
2. 存在一些用于处理图像、文本和其他模态数据的处理器类，如 `EvaClipImageTrainProcessor` 和 `HFTokenizer`。
3. 训练和评估相关的类，如 `LLaVATrainer` 和 `LLaVAEvalTrainer`，负责模型的训练和评估过程。
4. 模型配置类，如 `LlavaConfig` 和 `ModelConfig`，用于定义模型的参数和设置。
5. 数据集和数据加载器类，如 `LazySupervisedDataset` 和 `DataCollatorForCompletionOnlyLM`，用于处理和加载训练数据。

总结：LLava项目是一个复杂的多模态大模型，包含了丰富的类和模块来处理不同类型的输入数据、训练模型和评估性能。通过UML图，我们可以更清楚地了解各个类之间的关系和功能划分。如果您需要更详细的分析，请告诉我。
2025-06-08 16:59:17.829 | INFO     | main:websocket_endpoint:72 - Cleaned up resources for 127.0.0.1:52273
